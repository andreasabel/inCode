<?xml version="1.0" encoding="UTF-8"?><rss dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>in Code — Entries</title><link>https://blog.jle.im/</link><description>Weblog of Justin Le, covering various adventures in programming and explorations in the worlds of computation physics, and knowledge.
</description><item><title>Breaking a Degenerate Hyper-Dimensional Game of Life</title><link>https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html</link><description>&lt;p&gt;tldr: Demonstrated with interactive visualizations and simulations — over the course of a month, we were able to discover successive new mathematical properties of a “degenerate” hyper-dimensional game of life&#34; to take a “7 dimensions may just barely be possible on a commercial PC, could we ever reach 10 dimensions?” to “10 dimensions is easy enough to be run on any modern browser (&lt;a href=&#34;#golFlat&#34;&gt;jump to spoilers here&lt;/a&gt;), and 60 dimensions can be reached with a compiled language”.&lt;/p&gt;
&lt;p&gt;This is a story about breaking a degenerate hyper-dimensional game of life via interactive exploratory visualizations and math!&lt;/p&gt;
&lt;p&gt;T’was the night before Thursday, December 17, 2020, the release of &lt;a href=&#34;https://adventofcode.com/2020/day/17&#34;&gt;“Conway Cubes”&lt;/a&gt;. It was Day 17 of &lt;a href=&#34;https://adventofcode.com/2020&#34;&gt;Advent of Code 2020&lt;/a&gt;, a series of fun little themed coding puzzles building up to Christmas; I always enjoyed these puzzles because they are so self-contained and tidy that they are often &lt;em&gt;open-ended&lt;/em&gt; in the interesting ways you can solve them or expand on them (which I’ve written &lt;a href=&#34;https://blog.jle.im/entries/series/+advent-of-code.html&#34;&gt;many blog posts on&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;On the surface, Day 17 seemed to be a straightforward extension of &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway’s Game Of Life&lt;/a&gt; (“GoL”). GoL is a simulation played out on a 2D grid, where cells are “on” and “off”, and at each step of the simulation the states spread and propagate in interesting ways based on the state of their neighbors (a &lt;a href=&#34;https://en.wikipedia.org/wiki/Cellular_automaton&#34;&gt;2D cellular automaton&lt;/a&gt;). The twist of the Advent of Code puzzle is it asks what would happen if we played out the rules of GoL in 3D instead, and then 4D.&lt;/p&gt;
&lt;p&gt;I submitted my solution on my assigned puzzle input with a naive implementation (placing 66 and 66 on the leaderboards for that day), concluding the “competitive” part. Of course, the real fun always starts after. When discussing with some friends, we started talking about the trade-offs of different implementations and realized that the extra dimensionality was no joke: as you upped the number of dimensions, the number of points you have to consider grow exponentially, and so does the number of neighbors at each point to check. 4D can be solved naively, but anything higher is going to be strained. My naive solution on 6D took three minutes, and 7D in a reasonable amount of time (requiring as much as 612,220,032 points with 2,186 neighbors each) seemed &lt;em&gt;impossible&lt;/em&gt; on commercial consumer hardware because of the sheer number of points in 7D space. But I thought…what if a breakthrough in optimization was possible? I set an (arbitrary) personal goal of reaching 10D (3,570,467,226,624 points with 59,048 neighbors each), not knowing if it would ever be possible.&lt;/p&gt;
&lt;p&gt;And soon…a breakthrough did come! Someone brought up that if we look at the 3d version, we see there’s actually a &lt;em&gt;mirror symmetry&lt;/em&gt;! Because everything starts off on the xy plane, with z=0, the resulting progression must be symmetrical on both sides (positive and negative z).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/entries/advent-gol/life3d.gif&#34; title=&#34;3D GoL animation demonstrating mirror symmetry by u/ZubSpAcE&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;3D GoL animation demonstrating mirror symmetry by &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfa3nr/2020_day_17_godot_cubes_i_think_i_went_a_bit_too/&#34;&gt;u/ZuBsPaCe&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This meant that we only have to simulate the &lt;em&gt;positive&lt;/em&gt; points (since the negative points are identical). This saves down the number of points by a factor of two for each extra dimension! Unfortunately, this wouldn’t quite get us to 10D, but the discovery completely changed how we saw this puzzle. With one breakthrough down, we began to believe that there would be more just around the corner, made possible by our problem’s special 2D-slice starting degeneracy.&lt;/p&gt;
&lt;p&gt;Such a dream (as posed in &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfb6zx/day_17_getting_to_t6_at_for_higher_spoilerss/&#34;&gt;this reddit thread I started&lt;/a&gt;) turned into a month-long ride of breakthrough after breakthrough, exploiting different aspects of this degeneracy. It was a month full of sudden twists and turns and bursts of excitement whenever new innovations came. And in the end, the hopeful question “7D is barely in reach; what if 10D was possible?” turned into “10D in 100ms, 40D in eight minutes…can we do 60D quickly?” This post even includes simulations to prove that we got 10D fast enough to run on easily on any modern browser. The whole journey became an adventure in the power of visualization combined with abstract thinking.&lt;/p&gt;
&lt;p&gt;So, let’s take a deep dive — deeper than you probably ever expected to dive into any particular degenerate starting conditions of a hyper-dimensional game of life :D&lt;/p&gt;
&lt;p&gt;There will be python code samples here and there, but just for context, my actual solvers I developed along the way were &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/src/AOC/Challenge/Day17.hs&#34;&gt;written in Haskell&lt;/a&gt;, and all of the solving logic embedded in this post was written in Purescript (&lt;a href=&#34;https://github.com/mstksg/inCode/blob/master/app-purescript/Gol.purs&#34;&gt;online here&lt;/a&gt;) and compiled to Javascript.&lt;/p&gt;
&lt;h2 id=&#34;table-of-figures&#34;&gt;Table of Figures&lt;/h2&gt;
&lt;p&gt;For reference, the interactive elements in this post are:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#golDrawer&#34;&gt;Initial condition drawer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gol2D&#34;&gt;2D Game of Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gol3D&#34;&gt;3D Game of Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golSyms3DForward&#34;&gt;3D Forward Neighbor Multiplicities&lt;/a&gt; / &lt;a href=&#34;#golSyms3DReverse&#34;&gt;3D Reverse Neighbor Multiplicities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gol4D&#34;&gt;4D Game of Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golSyms4DForward&#34;&gt;4D Forward Neighbor Multiplicities&lt;/a&gt; / &lt;a href=&#34;#golSyms4DReverse&#34;&gt;4D Reverse Neighbor Multiplicities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golSyms5D&#34;&gt;5D Neighbor Multiplicities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golTree&#34;&gt;General Neighbor Multiplicity Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golFlat&#34;&gt;N-D Game of Life&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;starting-off&#34;&gt;Starting Off&lt;/h2&gt;
&lt;p&gt;First of all, let’s meet our friend for the rest of this journey. In the drawer below, you can &lt;em&gt;draw&lt;/em&gt; (with your mouse) the 8x8 grid you want to simulate for the rest of this post. As you draw, the rest of the visualizations will update to use this as their initial conditions, so feel free to jump back and forth as you’re reading to customize and change what you want to simulate.&lt;/p&gt;
&lt;div id=&#34;golDrawer&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 1:&lt;/strong&gt; Initial Condition Drawer&lt;/p&gt;
&lt;div id=&#34;golDrawerCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here are some sample fun ones you can try out (click to load):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=____._▝▖_._▀▘_.____&#34; class=&#34;loadpoints&#34;&gt;classic glider&lt;/a&gt;, a default if only for how iconic it is.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=____._▞▖_._▝__.____&#34; class=&#34;loadpoints&#34;&gt;tub&lt;/a&gt;, which is a “still-life” in 2D, but explodes into a twinkling frenzy during the 4D animation.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=████.████.████.████&#34; class=&#34;loadpoints&#34;&gt;full block&lt;/a&gt;, which dies out in 2D but produces very appealing patterns in 3D and 4D. A &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=▛▀▀▜.▌▛▜▐.▌▙▟▐.▙▄▄▟&#34; class=&#34;loadpoints&#34;&gt;bulls-eye&lt;/a&gt; also yields interesting “geometric” patterns at higher dimensions. A &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=████.▄▗▖▄.▀▝▘▀.████&#34; class=&#34;loadpoints&#34;&gt;broken bar code&lt;/a&gt; also yields explosively intricate alternating behavior at higher dimensions.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=██▟█.▜███.███▙.█▛██&#34; class=&#34;loadpoints&#34;&gt;spiral galaxy&lt;/a&gt; with rotational symmetry, which produces rich spiral galaxy patterns up until 6D, but then all of a sudden becomes blocky and bland at 7D and above.&lt;/li&gt;
&lt;li&gt;My &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=▛▜▙▐.▜▚▗_.█▟▄▘.▟▌▟█&#34; class=&#34;loadpoints&#34;&gt;own personal assigned puzzle input&lt;/a&gt;, to see what the typical input looks like that people had to run on December 17th.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recommend trying out some of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns&#34;&gt;other interesting well-known patterns&lt;/a&gt; from 2D GoL, as well! If you find any interesting ones, I would be excited to hear about them!&lt;/p&gt;
&lt;p&gt;For fun, here’s a 2D vanilla game of life implementation (for six time steps) to test out your creation. Remember that some starting conditions will putter out in 2D, but expand forever in 3D+ due to the abundance of neighbors.&lt;/p&gt;
&lt;div id=&#34;gol2D&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 2:&lt;/strong&gt; 2D Game of Life&lt;/p&gt;
&lt;div id=&#34;gol2DCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that that’s there, let’s start at the beginning: what’s the naive, baseline solution?&lt;/p&gt;
&lt;p&gt;A reasonable initial thought would be:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Keep a 2D (or 3D, or 4D, etc.) array of booleans.&lt;/li&gt;
&lt;li&gt;At each step:
&lt;ol type=&#34;a&#34;&gt;
&lt;li&gt;Make a fresh copy of the entire space (&lt;span class=&#34;math inline&#34;&gt;\(O(n^d)\)&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;Loop over each item in your array (&lt;span class=&#34;math inline&#34;&gt;\(O(n^d)\)&lt;/span&gt;). Count all of the neighbors (&lt;span class=&#34;math inline&#34;&gt;\(O(3^d)\)&lt;/span&gt;) that are &lt;code&gt;true&lt;/code&gt; (“alive”), and write to the new array based on the rules table of GoL (2 or 3 neighbors for a live cell stays alive, 3 neighbors for a dead cell turns alive).&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;You have a new array! Loop again six times.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sounds reasonable enough! This does work for the 2D case pretty well (like in the &lt;a href=&#34;https://adventofcode.com/2020/day/11&#34;&gt;Day 11 puzzle&lt;/a&gt;). However, there are some clear issues when moving into higher dimensions. The size of your array grows exponentially on your dimension, and so does the number of neighbors you’d have to check. And the &lt;a href=&#34;https://en.wikipedia.org/wiki/Curse_of_dimensionality&#34;&gt;curse of dimensionality&lt;/a&gt; assures us that more and more of that array would become wasted as the proportion of “on” points shrinks to zero for higher dimensions.&lt;/p&gt;
&lt;p&gt;Oh, but what’s that? The percentage of “on” points shrinks to zero for higher dimensions? That actually sounds like something we can use to our &lt;em&gt;advantage&lt;/em&gt;! The &lt;em&gt;blessing&lt;/em&gt; of dimensionality*, I daresay? Because we know the vast majority of our points will be “off”, there’s another approach:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Keep a &lt;em&gt;set&lt;/em&gt; of points that are “on”.&lt;/li&gt;
&lt;li&gt;At each step:
&lt;ol type=&#34;a&#34;&gt;
&lt;li&gt;&lt;p&gt;Initialize a dynamic map (key-value store, like a python dict or Counter) of points to integers. This map associates each point to the number of live neighbors it has.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each step, iterate over each of your “on” points, expand all of their neighbors &lt;span class=&#34;math inline&#34;&gt;\(n_i\)&lt;/span&gt; (&lt;span class=&#34;math inline&#34;&gt;\(O(3^d)\)&lt;/span&gt;), and increment the value associated with &lt;span class=&#34;math inline&#34;&gt;\(n_i\)&lt;/span&gt; in your dynamic map.&lt;/p&gt;
&lt;p&gt;For example, if the point &lt;code&gt;&amp;lt;2,3&amp;gt;&lt;/code&gt; is in your set of live points, you would add increment the map’s values at keys &lt;code&gt;&amp;lt;1,2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;2,2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;3,2&amp;gt;&lt;/code&gt;, etc.: all 8 neighbors of &lt;code&gt;&amp;lt;2,3&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Collect your new set of “on” points: keep all of the keys in your dynamic map corresponding to live points if their integers are 2 or 3, and keep all of the keys in your dynamic map corresponding to dead points if their integers are 3.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;You have a new set! Loop again six times!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(I discuss this algorithm much more deeply with actual code in &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day17.md&#34;&gt;my solutions write-up in my Advent of Code reflections journal&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This method nets us a huge advantage because we now only have to loop over the number of items that we know are alive, and any points away from our set of alive points can be properly ignored. This narrows down our huge iteration space, and the benefits compound with every dimension due to the blessing of dimensionality.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both methods can be generalized to any dimension; in this second method, this just means a different sized tuple/vector in your set of alive points (&lt;code&gt;[x,y]&lt;/code&gt; vs. &lt;code&gt;[x,y,z]&lt;/code&gt;). One extra concern, though, is that you need to think through generating all &lt;span class=&#34;math inline&#34;&gt;\(3^d-1\)&lt;/span&gt; neighbors: that’s going to come down to a d-ary &lt;a href=&#34;https://observablehq.com/@d3/d3-cross&#34;&gt;cartesian product&lt;/a&gt; of &lt;code&gt;[-1,0,1]&lt;/code&gt; to itself.&lt;/p&gt;
&lt;p&gt;Here’s a python implementation of the set-based method, using a nice trick I learned from &lt;a href=&#34;https://twitter.com/phaazon_&#34;&gt;phaazon&lt;/a&gt; and &lt;a href=&#34;https://github.com/glguy&#34;&gt;glguy&lt;/a&gt; to get the right neighbors by doing a cartesian product against &lt;code&gt;[0,-1,1]&lt;/code&gt; instead of &lt;code&gt;[-1,0,1]&lt;/code&gt;, which leaves the first item as the &lt;code&gt;&amp;lt;0,0&amp;gt;&lt;/code&gt; “original point” we want to exclude.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; itertools &lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; islice, product&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; collections &lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; Counter&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; mk_neighbs(point):&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Return neighboring points, with the original point first&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    (1, 2)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    =&amp;gt; [(1, 2), (1, 1), (1, 3), (0, 2), (0, 1), (0, 3), (2, 2), (2, 1), (2, 3)]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;list&lt;/span&gt;(product(&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;[[x, x&lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;, x&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;] &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; point]))&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; step_naive(pts):&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Takes a set of points (tuples) and steps them in the simulation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;    neighbs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Counter()&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; point &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pts:&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# skip the first item, the original point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;        neighbs &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; Counter(mk_neighbs(point)[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:])&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; validate(point, ncount):&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; point &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pts:&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;or&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;frozenset&lt;/span&gt;(p &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; p, n &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs.items() &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; validate(p, n))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;three-dimensions&#34;&gt;Three Dimensions&lt;/h2&gt;
&lt;p&gt;Let’s see how this looks for the 3D case! To make things easier to see, we can render things in “slices” in 3D space: each grid represents a slice at a different z level (ie, the z=0 square represents all squares &lt;code&gt;&amp;lt;x,y,0&amp;gt;&lt;/code&gt;, the z=1 square represents all squares &lt;code&gt;&amp;lt;x,y,1&amp;gt;&lt;/code&gt;, etc.). Press “Play” to have the simulation cycle through 6 time steps!&lt;/p&gt;
&lt;div id=&#34;gol3D&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 3:&lt;/strong&gt; 3D Game of Life&lt;/p&gt;
&lt;div id=&#34;gol3DCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(Some patterns I suggest trying out are the flowery &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=██▟█.▜███.███▙.█▛██&#34; class=&#34;loadpoints&#34;&gt;spiral galaxy&lt;/a&gt; pattern and patterns with a single reflection symmetry, like the &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=████.▄▗▖▄.▀▝▘▀.████&#34; class=&#34;loadpoints&#34;&gt;broken bar code&lt;/a&gt;; double symmetry like &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=▛▀▀▜.▌▛▜▐.▌▙▟▐.▙▄▄▟&#34; class=&#34;loadpoints&#34;&gt;bulls-eye&lt;/a&gt; look nice too!)&lt;/p&gt;
&lt;p&gt;In reality, each of those 13 slices above are stacked on top of each other in 3D space. You’ll see that your live cells spread out from the center z=0 slice, which means they are actually spreading “up and down” the z axis.&lt;/p&gt;
&lt;p&gt;If you mouse over (or tap) any individual tiny &lt;code&gt;&amp;lt;x,y&amp;gt;&lt;/code&gt; cell, you’ll see the all of the 26 (&lt;span class=&#34;math inline&#34;&gt;\(3^d-1\)&lt;/span&gt;) &lt;code&gt;&amp;lt;x,y,z&amp;gt;&lt;/code&gt; 3D neighbors of the point you’re hovering over highlighted in blue — these 26 points form a 3D cube around your mouse through the stacked slices. You can use this cube to help see how the simulation progresses. If your mouse is hovering over a live cell, and there are 2 or 3 live cells highlighted in your cube, it’ll stay alive in the next time step. If your mouse is hovering over a dead cell and there are exactly 3 live cells highlighted in your cube, it will come alive in the next step.&lt;/p&gt;
&lt;h3 id=&#34;axis-reflection-symmetry&#34;&gt;Axis Reflection Symmetry&lt;/h3&gt;
&lt;p&gt;Try playing around with different initial conditions to see how they evolve! See any patterns?&lt;/p&gt;
&lt;p&gt;Freenode IRC user &lt;a href=&#34;https://github.com/sim642&#34;&gt;sim642&lt;/a&gt; noticed something late into the night of December 16th:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wanted to ask this before but forgot: did anyone try to take advantage of the symmetry, e.g. in z axis in part 1? Should halve the amount of calculations you have to do.&lt;/p&gt;
&lt;p&gt;Only some extra work at the end to differentiate z=0 and z&amp;gt;0 positions to know which to count twice And in part 2 I feel like you could also exploit the symmetry in w axis simultaneously&lt;/p&gt;
&lt;p&gt;— sim642&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You might have seen this too: the entire thing has reflection symmetry across z=0! z=1 is always the same as z=-1, z=2 is always the same as z=-2, etc. Fundamentally, this is because our starting solution has a &lt;em&gt;z-axis symmetry&lt;/em&gt;: the initial 2D slice is symmetric with reflections across z, because z=0 for all of those points. This is the first “degeneracy” that this blog post’s title is referring to: the negative and positive directions are interchangeable! This is reflected in the yellow highlight on hover: when you mouse-over a z square, its corresponding reflected twin is highlighted, and will always be identical.&lt;/p&gt;
&lt;p&gt;This means that we actually only need to simulate &lt;em&gt;positive&lt;/em&gt; z’s…and for our final answer we just “un-reflect” to get the total number.&lt;/p&gt;
&lt;p&gt;Let’s do this! Apparently, the picture is slightly more complicated than simply halving the points; we also need to change how to distribute neighbors. That’s because, once we commit to only keeping the positive z’s, some cells need to be double-counted as neighbors. In particular, any &lt;code&gt;z=0&lt;/code&gt; cell would previously had a neighbor at both &lt;code&gt;z=-1&lt;/code&gt; and &lt;code&gt;z=1&lt;/code&gt;…but now if we only keep the positive z’s, it would have &lt;code&gt;z=1&lt;/code&gt; as a neighbor &lt;em&gt;twice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The following interactive element lets you explore what this looks like:&lt;/p&gt;
&lt;div id=&#34;golSyms3DForward&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 4a:&lt;/strong&gt; 3D Forward Neighbor Multiplicities&lt;/p&gt;
&lt;div id=&#34;golSyms3DForwardCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each square represents an entire “slice” of z. When you mouse-over or tap a z-cell, its z-neighbors are highlighted with how many times that neighbor has to be counted, and the green bar tells you from what direction that neighborship arose from. For example, mousing over z=3, you will see z=2 and z=4 get highlighted with the values “1” because they are neighbors of 3, on the left and right side (respectively). Note that one neat property for all squares (except for z=6, which goes off the scale) is that the “total” higher-dimensional neighbors is always 2 (&lt;span class=&#34;math inline&#34;&gt;\(3^{d-2}-1\)&lt;/span&gt;) just like before; it’s just that &lt;em&gt;where&lt;/em&gt; those neighbors fall is re-arranged slightly.&lt;/p&gt;
&lt;p&gt;The tricky square is now z=0: if you mouse-over it, you’ll see that it has a single neighbor z=1 that is counted &lt;em&gt;twice&lt;/em&gt;, as a neighbor from both the left and right side.&lt;/p&gt;
&lt;p&gt;We can compute the above diagram by expanding any z to its neighbors (z-1, and z+1), applying the absolute value function, and seeing how points double-up. This gives us the &lt;strong&gt;forward neighbors&lt;/strong&gt;, and we can directly use it for the original “keep the full array” GoL implementation method.&lt;/p&gt;
&lt;p&gt;However, for the “keep active points and expand their neighbors” GoL implementation, we have to find the opposite of this. Remember that to build our “neighbors map” (the map of points to how many active neighbors they have), we have each cell “proactively” add its contributions to all of its neighbors. &lt;code&gt;&amp;lt;1,2,3&amp;gt;&lt;/code&gt; is a neighbor to &lt;code&gt;&amp;lt;1,3,4&amp;gt;&lt;/code&gt; once, so when we expand &lt;code&gt;&amp;lt;1,2,3&amp;gt;&lt;/code&gt; we would increment the value in the map at &lt;code&gt;&amp;lt;1,3,4&amp;gt;&lt;/code&gt; by 1 because &lt;code&gt;&amp;lt;1,2,3&amp;gt;&lt;/code&gt; is a neighbor of &lt;code&gt;&amp;lt;1,3,4&amp;gt;&lt;/code&gt; once.&lt;/p&gt;
&lt;p&gt;So the question becomes: how do we count &lt;code&gt;&amp;lt;1,3,1&amp;gt;&lt;/code&gt; expanding into &lt;code&gt;&amp;lt;1,3,0&amp;gt;&lt;/code&gt;? Well, normally, &lt;code&gt;&amp;lt;1,3,1&amp;gt;&lt;/code&gt; is a neighbor of &lt;code&gt;&amp;lt;1,3,0&amp;gt;&lt;/code&gt; once. However, if we only keep the normalized z values, &lt;code&gt;&amp;lt;1,3,1&amp;gt;&lt;/code&gt; is a neighbor of &lt;code&gt;&amp;lt;1,3,0&amp;gt;&lt;/code&gt;…twice! To compute the total neighbor count of &lt;code&gt;&amp;lt;1,3,0&amp;gt;&lt;/code&gt;, we have to count the contribution from &lt;code&gt;&amp;lt;1,3,1&amp;gt;&lt;/code&gt; twice (once for &lt;code&gt;&amp;lt;1,3,1&amp;gt;&lt;/code&gt; and once for &lt;code&gt;&amp;lt;1,3,-1&amp;gt;&lt;/code&gt;, which also exists, but was normalized away).&lt;/p&gt;
&lt;p&gt;That means we have to follow the original rules, but &lt;em&gt;backwards&lt;/em&gt;, like:&lt;/p&gt;
&lt;div id=&#34;golSyms3DReverse&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 4b:&lt;/strong&gt; 3D Reverse Neighbor Multiplicities&lt;/p&gt;
&lt;div id=&#34;golSyms3DReverseCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These are the &lt;strong&gt;reverse neighbors&lt;/strong&gt;: how many times a given point counts as a neighbor for its surrounding points. Here, mousing over z=1 shows that it counts as a neighbor for z=0 twice, from both the left and the right. It also counts as a neighbor for z=2 once (from the left side).&lt;/p&gt;
&lt;p&gt;We can account for this by hard-coding the rules into our step algorithm: if our z goes from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;, increment its value twice in the neighbor map. Otherwise, simply increment by 1 as normal.&lt;/p&gt;
&lt;p&gt;This rule is relatively straightforward to implement, and as a result we now halved our total number of points we need to keep and check for 3D! There’s also a nice way to generalize to arbitrary dimensions: for every &lt;code&gt;1 -&amp;gt; 0&lt;/code&gt; transition in a higher dimension, multiply by two. That means we reduce the number of 4D points we need to track by a factor of four, the number of 5D points by a factor of eight, the number of 6D points by a factor of 16… now our total points to check only grows as &lt;span class=&#34;math inline&#34;&gt;\(O(n^d / 2^{d-2})\)&lt;/span&gt; instead of &lt;span class=&#34;math inline&#34;&gt;\(O(n^d)\)&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;Here is a python implementation of this generalization:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; axis_weight(source,target):&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Retuns how many times the given source-&amp;gt;target transition should be&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    counted in target&amp;#39;s neighbor count&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# ignore x,y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    higher_source &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; source[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    higher_target &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; target[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;bu&#34;&gt;sum&lt;/span&gt;([&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i,j &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;zip&lt;/span&gt;(higher_source, higher_target)&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;                      &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;and&lt;/span&gt; j &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;                  ])&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; mk_positive_neighbs(point):&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;mk_neighbs, but only with positive higher dimensional points&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# this is a very wasteful implementation, for demonstrative purposes&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; [ngb &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; ngb &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; mk_neighbs(point) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;all&lt;/span&gt; (i &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ngb[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;:])]&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; step_axis(pts):&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Takes a set of points (tuples) and steps them in the simulation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    according to axis-reflection symmetry.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;    neighbs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Counter()&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; point &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pts:&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;        neighbs &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; Counter({ ngb: axis_weight(point,ngb)&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;                               &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; ngb &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; mk_positive_neighbs(point)[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:]&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;                           })&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; validate(point, ncount):&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; point &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pts:&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;or&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-34&#34;&gt;&lt;a href=&#34;#cb2-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;frozenset&lt;/span&gt;(p &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; p, n &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs.items() &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; validate(p, n))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This discovery late in the Tuesday night of the 16th was what inspired us to believe and dream that more breakthroughs might be possible to bring things down even further.&lt;/p&gt;
&lt;p&gt;Those breakthroughs soon came!&lt;/p&gt;
&lt;h2 id=&#34;four-dimensions&#34;&gt;Four Dimensions&lt;/h2&gt;
&lt;p&gt;Let’s look at how 4D game works! We can visualize this by taking “z-w” slices at different x-y planes. The labels in the following boxes are the &lt;code&gt;&amp;lt;z,w&amp;gt;&lt;/code&gt; of each slice. The very center is &lt;code&gt;&amp;lt;z,w&amp;gt; = &amp;lt;0,0&amp;gt;&lt;/code&gt; the row in the middle from the top is &lt;code&gt;w=0&lt;/code&gt;, and the column in the very middle from the left is &lt;code&gt;z=0&lt;/code&gt;. It’s basically taking the 3D visualization above and expanding it in an extra dimension. Press “Play” to run your initial conditions!&lt;/p&gt;
&lt;div id=&#34;gol4D&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 5:&lt;/strong&gt; 4D Game of Life&lt;/p&gt;
&lt;div id=&#34;gol4DCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(Some patterns I recommend trying are the patterns with double reflection symmetry like &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=▛▀▀▜.▌▛▜▐.▌▙▟▐.▙▄▄▟&#34; class=&#34;loadpoints&#34;&gt;bulls-eye&lt;/a&gt; and &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=████.████.████.████&#34; class=&#34;loadpoints&#34;&gt;full block&lt;/a&gt;, rotational symmetry like &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=██▟█.▜███.███▙.█▛██&#34; class=&#34;loadpoints&#34;&gt;spiral galaxy&lt;/a&gt;, and single-reflection symmetries like &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=████.▄▗▖▄.▀▝▘▀.████&#34; class=&#34;loadpoints&#34;&gt;broken bar code&lt;/a&gt;, which seems to alternate between different orientations).&lt;/p&gt;
&lt;p&gt;Most initial conditions will spread out from the center &lt;code&gt;&amp;lt;z,w&amp;gt; = &amp;lt;0,0&amp;gt;&lt;/code&gt; slice radially, spreading outwards into positive and negative z and w. Mouse-over or tap any individual tiny &lt;code&gt;&amp;lt;x,y&amp;gt;&lt;/code&gt; cell and you’ll see each of its 80 (&lt;span class=&#34;math inline&#34;&gt;\(3^4-1\)&lt;/span&gt;) &lt;code&gt;&amp;lt;x,y,z,w&amp;gt;&lt;/code&gt; 4D neighbors highlighted in blue, forming a little 3x3x3x3 “&lt;a href=&#34;https://en.wikipedia.org/wiki/Cosmic_Cube&#34;&gt;tesseract&lt;/a&gt;” (4D cube, or hypercube). Like in the 3D case, you can use this little hypercube to track how the simulation progresses: if your mouse if hovering over a live cell with 2 or 3 live cells in its hypercube, it’ll stay alive in the next step, if it’s hovering over a dead cell with 3 live cells in its hypercube, it’ll come alive in the next step.&lt;/p&gt;
&lt;h3 id=&#34;diagonal-reflection-symmetry&#34;&gt;Diagonal Reflection Symmetry&lt;/h3&gt;
&lt;p&gt;Play around and explore how simulations evolve! You will notice that the axis reflection symmetry is still preserved, as expected, but four ways (the slice at &lt;code&gt;&amp;lt;z,w&amp;gt; = &amp;lt;3,4&amp;gt;&lt;/code&gt; is always going to be identical to the slice at &lt;code&gt;&amp;lt;-3,4&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;3,-4&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;-3,-4&amp;gt;&lt;/code&gt;). These are reflected in the “deep yellow” highlights above when you mouse over a zw square. (Ignore the lighter yellow highlights for now!)&lt;/p&gt;
&lt;p&gt;And now, for the next big breakthrough: this exact visualization was what reddit user u/cetttbycett was looking at when &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfjhwh/year_2020_day_17_part_2_using_symmetry_in_4d_space/&#34;&gt;they made this post&lt;/a&gt; late Thursday the 17th/early Friday the 18th…and everything changed forever.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I noticed that the expansion of active cubes for part 2 is symmetric with respect to two hyperplanes in 4d space: These hyperplanes can be described by w = 0 and w-z = 0.&lt;/p&gt;
&lt;p&gt;Using these symmetries could make the code nearly eight times as fast.I was wondering if anyone tried that.&lt;/p&gt;
&lt;p&gt;— u/cetttbycettt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What u/cetttbycettt saw is what you can see now in the simulation above: it’s all of the &lt;em&gt;light yellow&lt;/em&gt; highlighted squares when you mouse-over (highlighting even &lt;em&gt;more&lt;/em&gt; identical slices to the one you are hovering over). In addition to the z=0 and w=0 lines (the two lines down the middle, up-down and left-right), we also have another line of symmetry: z=w and z=-w, the diagonal lines!&lt;/p&gt;
&lt;p&gt;That’s right, a zw slice at &lt;code&gt;&amp;lt;z,w&amp;gt;=&amp;lt;3,4&amp;gt;&lt;/code&gt; is &lt;em&gt;identical&lt;/em&gt; to the one at &lt;code&gt;&amp;lt;4,3&amp;gt;&lt;/code&gt;, and so also &lt;code&gt;&amp;lt;-3,4&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;3,-4&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;-3,-4&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;-4,3&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;4,-3&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;-4,-3&amp;gt;&lt;/code&gt;! Each slice is potentially repeated &lt;em&gt;eight&lt;/em&gt; times! The exceptions are the points on the lines of symmetry themselves, which are each repeated only four times, and also &lt;code&gt;&amp;lt;z,w&amp;gt;=&amp;lt;0,0&amp;gt;&lt;/code&gt;, which is in a class of its own.&lt;/p&gt;
&lt;p&gt;So, our first breakthrough meant that we only have to simulate &lt;em&gt;positive&lt;/em&gt; coordinates (a single quadrant)…our next breakthrough means that we only have to simulate coordinates on a single “wedge” half-quadrant…and then duplicate those eight times at the end. (Arbitrarily, let’s say we only simulate the north-by-northeast wedge, because it’s easy to normalize/compact all points onto that wedge — you just need to absolute-value all the components and sort them, and a point like &lt;code&gt;&amp;lt;4,-3&amp;gt;&lt;/code&gt; gets “normalized” to &lt;code&gt;&amp;lt;3,4&amp;gt;&lt;/code&gt;))&lt;/p&gt;
&lt;p&gt;We found a new symmetry now, but we run into the same issue as before: How do we propagate neighbors? To help us see what’s going on, let’s look at the map of neighbors between different &lt;code&gt;&amp;lt;z,w&amp;gt;&lt;/code&gt; squares, for the single zw wedge we are simulating.&lt;/p&gt;
&lt;div id=&#34;golSyms4DForward&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 6a:&lt;/strong&gt; 4D Forward Neighbor Multiplicities&lt;/p&gt;
&lt;div id=&#34;golSyms4DForwardCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These are the &lt;em&gt;forward neighbors&lt;/em&gt;; we can compute them by expanding a point to its neighbors, and then normalizing our points and seeing how they double (or quadruple) up.&lt;/p&gt;
&lt;p&gt;For example, mouse over &lt;code&gt;&amp;lt;z,w&amp;gt;=&amp;lt;3,3&amp;gt;&lt;/code&gt; and see it has eight total higher-dimensional neighbors (like all points should, though this visualization leaves out points at w&amp;gt;6). It’s &lt;em&gt;supposed&lt;/em&gt; to have a neighbor at &lt;code&gt;&amp;lt;4,3&amp;gt;&lt;/code&gt;, but that gets reflected back onto &lt;code&gt;&amp;lt;3,4&amp;gt;&lt;/code&gt; during our normalization process, so you see that the point &lt;code&gt;&amp;lt;3,3&amp;gt;&lt;/code&gt; has a neighbor at &lt;code&gt;&amp;lt;3,4&amp;gt;&lt;/code&gt; “double-counted”. The green squares (in the north and west positions) at &lt;code&gt;&amp;lt;3,4&amp;gt;&lt;/code&gt; when you hover over &lt;code&gt;&amp;lt;3,3&amp;gt;&lt;/code&gt; show that &lt;code&gt;&amp;lt;3,4&amp;gt;&lt;/code&gt; is a neighbor of &lt;code&gt;&amp;lt;3,3&amp;gt;&lt;/code&gt; both to its north and to its west.&lt;/p&gt;
&lt;p&gt;Also, we have something really odd show up for the first time. Mouse over a point like &lt;code&gt;&amp;lt;z,w&amp;gt;=&amp;lt;2,3&amp;gt;&lt;/code&gt; and see that it has a neighbor in…itself? What’s going on here? Well, it is &lt;em&gt;supposed&lt;/em&gt; to have a neighbor at &lt;code&gt;&amp;lt;3,2&amp;gt;&lt;/code&gt; but that gets normalized/reflected back onto &lt;code&gt;&amp;lt;2,3&amp;gt;&lt;/code&gt; — it reflects onto itself! The green square in the Southeast means that &lt;code&gt;&amp;lt;2,3&amp;gt;&lt;/code&gt;’s southeast neighbor is…itself!&lt;/p&gt;
&lt;p&gt;Here is a sample python implementation of the computation of forward neighbor multiplicities for any dimension by propagating-then-normalizing:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; normalize(point):&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Normalize a point by sorting the absolute values&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    (2, -1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    =&amp;gt; (1, 2)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;bu&#34;&gt;sorted&lt;/span&gt;([&lt;span class=&#34;bu&#34;&gt;abs&lt;/span&gt;(x) &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; point]))&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; forward_neighbs(point):&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Generate the higher-dimensional forward neighbors of a point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    (0, 1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    =&amp;gt; {(0, 1): 2, (1, 2): 2, (1, 1): 2, (0, 0): 1, (0, 2): 1}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; Counter([normalize(neighb) &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; neighb &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; mk_neighbs(point)[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:]])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The forward neighbors are useful for understanding what’s going on, but to actually run our simulation we again need to find the &lt;em&gt;reverse neighbors&lt;/em&gt;: from a given point A, how many times is that point a neighbor of another point B?&lt;/p&gt;
&lt;p&gt;We can compute this in brute-force using a cache: iterate over each point, expand all its neighbors &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt;, normalize that neighbor, and then set &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; in the cache to the multiplicity after normalization.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; reverse_neighbs_table(t_max):&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Tabulate the reverse neighbors of all zw slices reachable before t_max&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    weights &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;range&lt;/span&gt;(t_max):&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;range&lt;/span&gt;(i, t_max):&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; neighb, ncount &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; forward_neighbs((i, j)).items():&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; neighb &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; weights:&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;                    weights[neighb][(i, j)] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ncount&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;                    weights[neighb] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {(i, j): ncount}&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; weights&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems pretty expensive and wasteful, so we’d like to maybe find a formula to be able to do this using mathematical operations. So, let’s explore!&lt;/p&gt;
&lt;div id=&#34;golSyms4DReverse&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 6b:&lt;/strong&gt; 4D Reverse Neighbor Multiplicities&lt;/p&gt;
&lt;div id=&#34;golSyms4DReverseCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These are the reverse neighbors, and it follows the same rules for the &lt;a href=&#34;#golSyms3DReverse&#34;&gt;3D Reverse Neighbors&lt;/a&gt;: mouse over a point and you’ll see how many times it appears as a neighbor to its nearby points. The green square represents the direction that it sees the hovered point as a neighbor. It’s the flipped version of the &lt;a href=&#34;#golSyms4DForward&#34;&gt;4D Forward Neighbors&lt;/a&gt; above.&lt;/p&gt;
&lt;p&gt;After exploring this interactively, we can maybe think of some rules we can apply.&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;If we have a point &lt;code&gt;&amp;lt;z,z&amp;gt;&lt;/code&gt; directly on the z=w diagonal, just use its five normal left/up neighbors with weight 1 each.&lt;/li&gt;
&lt;li&gt;If we have a point &lt;code&gt;&amp;lt;z,z+1&amp;gt;&lt;/code&gt; on the “inner-er” diagonal, use its five normal left/up neighbors with weight 1, but its south and west neighbors have weight 2, and the point reflects onto &lt;em&gt;itself&lt;/em&gt; with weight 1.&lt;/li&gt;
&lt;li&gt;If we’re on &lt;code&gt;z=1&lt;/code&gt; and we move into &lt;code&gt;z=0&lt;/code&gt;, double that count (phew, the same rule as in the 3D case earlier)&lt;/li&gt;
&lt;li&gt;If we’re on w=1 and we move into w=0, double that count (same as before)&lt;/li&gt;
&lt;li&gt;And…I guess &lt;code&gt;&amp;lt;0,1&amp;gt;&lt;/code&gt; reflects onto itself &lt;em&gt;twice&lt;/em&gt;? I guess that technically falls under a combination of rule 2 and rule 4, but we don’t directly observe the motion into w=0 before it gets reflected so it has to be special-cased.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Okay, those rules are &lt;em&gt;sliiightly&lt;/em&gt; more complicated than our 3D rules (“if we go from z=1 to z=0, double-count it”)…but they’re at least mechanical enough to code in, even if not beautiful. You can probably foresee that it might be tough to generalize, but…we’ll tackle that when we get there :)&lt;/p&gt;
&lt;p&gt;For now, we have a super-fast implementation of 4D GoL with our special degeneracy! The runtime gets reduced by a factor of 8!&lt;/p&gt;
&lt;p&gt;For clarity, here’s an example implementation of how we can do this higher-dimensional wrangling:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; reverse_neighbs(point):&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Return normalized higher-dimensional points, with their reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    multiplicities&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    (0, 1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    =&amp;gt; {(0, 0): 4, (0, 1): 2, (1, 1): 2, (0, 2): 1, (1, 2): 1}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# implementation elided&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;# one possibility is to lookup into reverse_neighbs_table(t_max)[point]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; step_with_weights(pts):&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;    neighbs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Counter()&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; point &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pts:&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# 2d component, &amp;lt;x,y&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;        pt_2d &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; point[:&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# higher-dimension components, &amp;lt;z,w,...&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;        pt_nd &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; point[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# insert neighbors in the same 2d slice, not including itself&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;        neighbs &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; Counter([ngb &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; pt_nd &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; ngb &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; mk_neighbs(pt_2d)[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:]])&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# insert neighbors in the neighboring 2d slices&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;        neighbs &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; Counter({(ngb_2 &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; ngb_n): wt&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;                                &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; ngb_n, wt &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; reverse_neighbs(pt_nd)&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;                                &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; ngb_2 &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; mk_neighbs(pt_2d)&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;                          })&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; validate(point, ncount):&lt;/span&gt;
&lt;span id=&#34;cb5-29&#34;&gt;&lt;a href=&#34;#cb5-29&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; point &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pts:&lt;/span&gt;
&lt;span id=&#34;cb5-30&#34;&gt;&lt;a href=&#34;#cb5-30&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;or&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-31&#34;&gt;&lt;a href=&#34;#cb5-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb5-32&#34;&gt;&lt;a href=&#34;#cb5-32&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-33&#34;&gt;&lt;a href=&#34;#cb5-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-34&#34;&gt;&lt;a href=&#34;#cb5-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;frozenset&lt;/span&gt;(p &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; p, n &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs.items() &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; validate(p, n))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, onward to 5D!&lt;/p&gt;
&lt;h2 id=&#34;breaking-through&#34;&gt;Breaking Through&lt;/h2&gt;
&lt;p&gt;By stepping into 5D, we’ve moved into a brand new territory — we’re now past what the original question was asking about, and into simply exploring a personal curiosity for fun. No longer are we “super-optimizing” the puzzle — we’re now warping the original challenge to levels it was never designed to handle.&lt;/p&gt;
&lt;p&gt;It’s difficult to visualize how things look in 5 dimensions, so this is where it gets a little tricky to make any progress, mentally. The first thing we need to figure out is how exactly we can generalize the “z=w” symmetry from 4D to be able to take advantage of it in 5D…and hopefully in a way that can generalize to arbitrary dimensions. Along the way we’d also like to get rid of our hacky 4D neighbor multiplicity rules and get something a little cleaner.&lt;/p&gt;
&lt;p&gt;I struggled with for a while without making too much headway…but on the morning of Friday, December 18th, arguably the biggest revelation of the entire journey was dropped by Michal Marsalek on u/cetttbycettt’s reddit thread. It was a big deal, because not only did it allow us to generalize our symmetries to higher dimensions, but it also &lt;em&gt;proved&lt;/em&gt; a specific degeneracy that allowed 10D simulation to be definitely 100% &lt;em&gt;solvable&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;permutation-symmetry&#34;&gt;Permutation Symmetry&lt;/h3&gt;
&lt;p&gt;Here was Michal’s &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfjhwh/year_2020_day_17_part_2_using_symmetry_in_4d_space/gg9vr6m/&#34;&gt;historic post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, all the higher dimensions are interchangeable, there’s nothing that distinquishes them. That is, if there’s an active cell at position (x,y, a,b,c,d,e,f,g) then, there’s also one at (x,y, c,d,g,e,f,a) and at all other permutations, of coordinates a-g). That is the number of cells that one need to track can be reduced by factor of &lt;span class=&#34;math inline&#34;&gt;\((d-2)! \times 2^{d-2}\)&lt;/span&gt; (at least if time goes to infinity).&lt;/p&gt;
&lt;p&gt;…we can use symmetries coming from permutations, to only track cells where &lt;span class=&#34;math inline&#34;&gt;\(|x_0| &amp;lt; 6,\, |x_1| &amp;lt; 6,\, 0 \leq x_2 \leq x_3 \leq\,\ldots\, \leq x_{d-1} \leq t\)&lt;/span&gt;. There’s &lt;span class=&#34;math inline&#34;&gt;\(20^2 \times \sum_{k=0}^{t} { {d-3+k} \choose {k} }\)&lt;/span&gt; such cells.&lt;/p&gt;
&lt;p&gt;— Michal Marsalek&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;(equations slightly modified)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And boy was this exciting to read. First of all, it gave a way to generalize the z=w symmetry: it’s just &lt;a href=&#34;https://en.wikipedia.org/wiki/Permutation&#34;&gt;permutation symmetry&lt;/a&gt; for all higher-dimensional coordinates! But the big kicker here: See that last formula? Let’s look at it more closely, using &lt;span class=&#34;math inline&#34;&gt;\(\hat{d}\)&lt;/span&gt; to represent &lt;span class=&#34;math inline&#34;&gt;\(d-2\)&lt;/span&gt;, the number of higher dimensions:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
20^2 \times \sum_{k=0}^{t} { {\hat{d}-1+k}\choose{k} }
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(That notation is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Binomial_coefficient&#34;&gt;binomial coefficient&lt;/a&gt;, if you aren’t familiar with it.) Note that the summation has a &lt;em&gt;fixed number of terms&lt;/em&gt; (with respect to dimension); that means we only ever have 6 terms to expand, no matter how high the dimensions are — at 10D and even 100D! Furthermore, we can simplify the above using properties of binomial coefficients to get&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
20^2 \times { {\hat{d}+6}\choose{6} }
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This binomial coefficient is actually polynomial on &lt;span class=&#34;math inline&#34;&gt;\(\hat{d}\)&lt;/span&gt; — it’s &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{6!} \prod_{k=1}^6 (\hat{d}+k)\)&lt;/span&gt; — a sixth degree polynomial (leading term &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{6!} \hat{d}^6\)&lt;/span&gt;), in fact. This means that we have turned the number of points we potentially need to track from exponential (&lt;span class=&#34;math inline&#34;&gt;\(O(13^{\hat{d}})\)&lt;/span&gt;) to slightly smaller exponential (&lt;span class=&#34;math inline&#34;&gt;\(O(6^{\hat{d}})\)&lt;/span&gt;) to now &lt;em&gt;polynomial&lt;/em&gt; (&lt;span class=&#34;math inline&#34;&gt;\(O(\hat{d}^6)\)&lt;/span&gt;)!&lt;/p&gt;
&lt;p&gt;So, not only did we figure out a way to generalize/compute our symmetries, we also now know that this method lets us keep our point set &lt;em&gt;polynomial&lt;/em&gt; on the dimension, instead of exponential.&lt;/p&gt;
&lt;p&gt;To put a concrete number for context, for that dream of 10D, here are only &lt;span class=&#34;math inline&#34;&gt;\({ {8+6} \choose 6 }\)&lt;/span&gt;, or 3003 potential unique &lt;code&gt;&amp;lt;z,w,...&amp;gt;&lt;/code&gt; points, once you factor out symmetries! The number went down from &lt;span class=&#34;math inline&#34;&gt;\(13^8\)&lt;/span&gt; (815,730,721) potential unique &lt;code&gt;&amp;lt;z,w,...&amp;gt;&lt;/code&gt; points to &lt;span class=&#34;math inline&#34;&gt;\(6^8\)&lt;/span&gt; (1,679,616) potential unique points with positive/negative symmetry to just 3003 with permutation symmetry.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Furthermore, because of the blessing of dimensionality mentioned earlier, we can expect more and more of those to be empty as we increase our dimensions.&lt;/p&gt;
&lt;p&gt;And in a flash, 10D didn’t feel like a dream anymore; it felt like an inevitability. And now, it was just a race to see who could get there first.&lt;/p&gt;
&lt;h3 id=&#34;the-race-to-10d&#34;&gt;The Race to 10D&lt;/h3&gt;
&lt;p&gt;Unfortunately, the exact record of who reached and posted 10D first is a bit lost to history due to reddit’s editing records (not that “first” is necessarily a meaningful title to hold; there’s no prize, and everyone is working at their own pace). A few people maintained and updated their posts to prevent clutter, but the record and time stamp of when they first posted 10D is lost. If any of them happens to read this and can more accurately verify their times, I’d be happy to update!&lt;/p&gt;
&lt;p&gt;For me, I’m sure I was not the first one, but in my chat logs I see that I chimed into freenode’s &lt;code&gt;##adventofcode-spoilers&lt;/code&gt; channel in excitement in the wee morning hours (PST) Saturday December 19th:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2020-12-19 02:32:42   jle`    | d=10 in 9m58s
2020-12-19 02:33:05   jle`    | hooray my goal :)
2020-12-19 02:33:08   jle`    | time to sleep now
2020-12-19 02:33:12   xerox_  | goodnight
2020-12-19 02:33:35   jle`    | xerox_: thanks :)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pure joy! :D&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfb6zx/day_17_getting_to_t6_at_for_higher_spoilerss/ggaaqsy/&#34;&gt;Peter Tseng&lt;/a&gt; made a post on &lt;em&gt;Thursday&lt;/em&gt; night with times, but I can’t remember if it incorporated all the symmetries or originally included 10D. &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfb6zx/day_17_getting_to_t6_at_for_higher_spoilerss/ggsx9e9/&#34;&gt;Michal Marsalek&lt;/a&gt; was able to implement the idea that they originally proposed by the following Wednesday (December 23rd) in Nim to blow everyone’s time out of the water: 3 seconds flat!&lt;/p&gt;
&lt;p&gt;At that point, it was pretty unbelievable to me that what started out as a dream goal that we couldn’t have reasonably completed on a commercial PC had, through successive revelations and insights building on each other one by one, could now be done in 3 seconds.&lt;/p&gt;
&lt;p&gt;But hey, I promised 100ms in the introduction, and a way to reach 60D, right?&lt;/p&gt;
&lt;p&gt;With our original goal completed, it was now time to dig in a little deeper and see how far this baby could go.&lt;/p&gt;
&lt;h3 id=&#34;diving-deeper-terminology&#34;&gt;Diving Deeper: Terminology&lt;/h3&gt;
&lt;p&gt;Before we go any further, let’s take a break to clarify and introduce some terminology we’ll be using for the rest of this post.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I’ve been using the word &lt;strong&gt;slice&lt;/strong&gt; to talk about a 2D grid representing a single higher-dimensional &lt;code&gt;&amp;lt;z,w...&amp;gt;&lt;/code&gt; coordinate — they’re the 13 grids in &lt;a href=&#34;#gol3D&#34;&gt;the 3D simulation&lt;/a&gt; and the 169 grids in &lt;a href=&#34;#gol4D&#34;&gt;the 4D simulation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ve also been using &lt;strong&gt;cell&lt;/strong&gt; to refer to an exact specific &lt;code&gt;&amp;lt;x,y,z,w,..&amp;gt;&lt;/code&gt; spot — they are the tiny squares inside each grid in the simulations above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ll start using the word &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Dp8sYTlLQRY&#34;&gt;coset&lt;/a&gt;&lt;/strong&gt; to refer the set of all of the duplicates of an &lt;code&gt;&amp;lt;x,y&amp;gt;&lt;/code&gt; across all permutations and negations of &lt;code&gt;&amp;lt;z,w,q,..&amp;gt;&lt;/code&gt;, since they all behave the same (they are either all on or all off together). So &lt;code&gt;&amp;lt;x,y,1,2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;x,y,2,1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;x,y,-1,2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;x,y,1,-2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;x,y,-1,-2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;x,y,-2,1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;x,y,2,-1&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;x,y,-2,-1&amp;gt;&lt;/code&gt; are all a part of the same coset, represented by the normalized form &lt;code&gt;&amp;lt;x,y,1,2&amp;gt;&lt;/code&gt;. Now, during our simulation, we only need to simulate one member from each coset, because every member is identically present or not present. For the sake of implementation, we simulate the arbitrary &lt;em&gt;normalized&lt;/em&gt; (positive and sorted) member only. Because of this, we’ll sometimes refer to the normalized item and the coset it represents as the same thing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ll also start using &lt;strong&gt;slice coset&lt;/strong&gt; to talk about the set of all &lt;code&gt;&amp;lt;z,w,...&amp;gt;&lt;/code&gt; slices) across its permutations and negations. The slices at z-w coordinates of &lt;code&gt;&amp;lt;1,2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;2,1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;-1,2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;1,-2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;-1,-2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;-2,1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;2,-1&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;-2,-1&amp;gt;&lt;/code&gt; are all a part of the same slice coset, represented by the normalized form &lt;code&gt;&amp;lt;1,2&amp;gt;&lt;/code&gt;. All of the slices at each of those zw coordinates will always be identical, so we can talk the state of a single slice at &lt;code&gt;&amp;lt;1,2&amp;gt;&lt;/code&gt; as representing the state of its entire coset.&lt;/p&gt;
&lt;p&gt;Slice cosets are what are being highlighted on mouseovers for the &lt;a href=&#34;#gol3D&#34;&gt;3D&lt;/a&gt; and &lt;a href=&#34;#gol4D&#34;&gt;4D simulations&lt;/a&gt;. They are also what the big squares represent for the &lt;a href=&#34;#golSyms3DForward&#34;&gt;3D Forward Neighbors&lt;/a&gt;, the &lt;a href=&#34;#golSyms3DReverse&#34;&gt;3D Reverse Neighbors&lt;/a&gt;, the &lt;a href=&#34;#golSyms4DForward&#34;&gt;4D Reverse Neighbors&lt;/a&gt;, and the &lt;a href=&#34;#golSyms4DReverse&#34;&gt;4D Reverse neighbors&lt;/a&gt; elements: each slice stands in for their entire slice coset, and we show the amount of times each normalized slice coset element is a neighbor of the other.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tackling-the-neighbor-problem&#34;&gt;Tackling the Neighbor Problem&lt;/h2&gt;
&lt;p&gt;My initial d=10 time clocked in at just under 10 minutes initially, but as early as next Wednesday we knew that a sub-5 second time was possible. So where was the gap?&lt;/p&gt;
&lt;p&gt;Well, I didn’t really know what to do about the neighbor multiplicity problem. I was still brute-forcing by way of forward neighbors + normalizing (as in the sample 4D python code snippet earlier). The naive brute-force method requires computing &lt;em&gt;all&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(3^{ {\hat{d}} } - 1\)&lt;/span&gt; higher-dimensional neighbors. So, even though the number of points I’d have to track grows polynomially, I still had that pesky exponential factor in building my neighbor cache. At high dimensions, that exponential factor dominates over everything.&lt;/p&gt;
&lt;p&gt;So put on your hard hats and working boots … we’re going to dive deep into the world of hyper-dimensional symmetries!&lt;/p&gt;
&lt;h3 id=&#34;five-dimensions&#34;&gt;Five Dimensions&lt;/h3&gt;
&lt;p&gt;First, let’s start visualizing how things look like in 5 dimensions, now that we know what our slice coset/representative structure looks like. Partially to help us gain an intuition for some of what’s going on, and also partially to show that intuition at the individual component level can only get so far.&lt;/p&gt;
&lt;p&gt;It’s a bit difficult to duplicate the same &lt;a href=&#34;#golSyms4DForward&#34;&gt;forward neighbor&lt;/a&gt;/&lt;a href=&#34;#golSyms4DReverse&#34;&gt;reverse neighbor&lt;/a&gt; interactive elements as we had for 4D, so here’s a different representation. Here is an interactive element of all of the &lt;code&gt;&amp;lt;z,w,q&amp;gt;&lt;/code&gt; slice cosets (the wedge of normalized points we track for our implementation) and both their forward and reverse neighbor weights of each other (computable using the method we used for 4D). The &lt;code&gt;q&lt;/code&gt; axis is represented as stacked zw sections from left to right.&lt;/p&gt;
&lt;div id=&#34;golSyms5D&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 7:&lt;/strong&gt; 5D Neighbor Multiplicities&lt;/p&gt;
&lt;div id=&#34;golSyms5DCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you mouse-over a slice coset representative (a single square), all of its neighbors will be highlighted, including reflections. The red dot on the left is the forward neighbor multiplicity (how many times that other slice is a neighbor of the hovered slice) and the blue dot on the left is the reverse neighbor multiplicity (how many times the hovered slice is a neighbor of the other slice). For example, if you hover over &lt;code&gt;&amp;lt;z,w,q&amp;gt;=&amp;lt;1,3,4&amp;gt;&lt;/code&gt;, you can see that &lt;code&gt;&amp;lt;0,3,4&amp;gt;&lt;/code&gt; is its neighbor twice, and &lt;code&gt;&amp;lt;1,3,4&amp;gt;&lt;/code&gt; is &lt;code&gt;&amp;lt;0,3,4&amp;gt;&lt;/code&gt;’s neighbor four times. These four times come from the normalized reflections of &lt;code&gt;&amp;lt;1,3,4&amp;gt;&lt;/code&gt; at &lt;code&gt;&amp;lt;1,3,4&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;1,4,3&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;-1,3,4&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;-1,4,3&amp;gt;&lt;/code&gt;. Some squares are also neighbors to themselves (like &lt;code&gt;&amp;lt;1,4,5&amp;gt;&lt;/code&gt;, which reflects off of the top edge at &lt;code&gt;&amp;lt;1,5,4&amp;gt;&lt;/code&gt;) and some are not (like &lt;code&gt;&amp;lt;1,3,5&amp;gt;&lt;/code&gt;). &lt;a href=&#34;https://www.youtube.com/watch?v=rSfebOXSBOE&#34;&gt;Mind bottling&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;At least one pattern we can see clearly is that if you are at a point where each component is 4 or lower (so it doesn’t run off the edge of our table), the sum of all its neighbors’ red dots (the forward neighbors) is &lt;span class=&#34;math inline&#34;&gt;\(3^3-1\)&lt;/span&gt; = 26, just like how the sum of forward neighbors for interior points in 3D is &lt;span class=&#34;math inline&#34;&gt;\(3^2-1\)&lt;/span&gt; = 8, and for 2D is &lt;span class=&#34;math inline&#34;&gt;\(3^1-1\)&lt;/span&gt; = 2.&lt;/p&gt;
&lt;p&gt;Another very important pattern is that “is a neighbor” seems to be reversible: the set of all &lt;em&gt;forward&lt;/em&gt; neighbors of a point is the same as all &lt;em&gt;reverse&lt;/em&gt; neighbors of a point — the only difference is the multiplicities. That is, wherever you see a red dot, you will also always see a blue dot. No single-dot squares.&lt;/p&gt;
&lt;p&gt;Anyway, you can explore this a little bit and try to come up with a set of ad-hoc rules like we did for 4D, but I think we’ve reached the limits of how far that method can go. We can generate these values simply enough using the expand-normalize-tabulate method we did for 4D, but it’s pretty inefficient, and there should be a way to compute these weights &lt;em&gt;directly&lt;/em&gt; in a clean fashion that doesn’t require hard-coding special cases and patterns. It’s clear that we are limited until we can find this method.&lt;/p&gt;
&lt;h3 id=&#34;go-with-the-flow&#34;&gt;Go with the Flow&lt;/h3&gt;
&lt;p&gt;What do all our valid normalized &lt;code&gt;&amp;lt;z,w,...&amp;gt;&lt;/code&gt; coordinates look like? Well, they are always non-decreasing, and always are less than or equal to the current timestep. Keeping t=6 as our goal still, this means that valid coordinates in 10D are strings of eight numbers, like &lt;code&gt;0,1,1,1,3,5,5,6&lt;/code&gt;, or &lt;code&gt;0,0,3,4,4,4,6,6&lt;/code&gt;, or &lt;code&gt;1,1,2,3,3,4,5,5&lt;/code&gt;.&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We run into problems working with this format, though. For example, if we’re computing a neighbor of &lt;code&gt;0,1,1,1,3,5,5,6&lt;/code&gt;, we can imagine that the very first &lt;code&gt;1&lt;/code&gt; (the w coordinate) could move to be a &lt;code&gt;2&lt;/code&gt;, resulting in &lt;code&gt;0,2,1,1,3,5,5,6&lt;/code&gt;. However, we’re now in &lt;em&gt;un-normalized&lt;/em&gt; territory…we have to re-sort it to turn it into &lt;code&gt;0,1,1,2,3,5,5,6&lt;/code&gt;. This encoding isn’t something we can directly manipulate in a nice way.&lt;/p&gt;
&lt;p&gt;Because we don’t care about order, what if we instead encoded each higher-dimensional coordinate as “count of each value seen?” For example, we can encode &lt;code&gt;0,1,1,1,3,5,5,6&lt;/code&gt; as &lt;code&gt;1-3-0-1-0-2-1&lt;/code&gt;: the first slot represents how many 0s we have, the second how many 1s, the next how many 2s, the next how many 3s, etc. We can encode &lt;code&gt;0,0,3,4,4,4,6,6&lt;/code&gt; as &lt;code&gt;2-0-0-1-3-0-2&lt;/code&gt; and &lt;code&gt;1,1,2,3,3,4,5,5&lt;/code&gt; as &lt;code&gt;0-2-1-2-1-2-0&lt;/code&gt;. The &lt;em&gt;sum&lt;/em&gt; of the components gives you the total number of higher dimensions (ie, 10D vectors sum to 8)&lt;/p&gt;
&lt;p&gt;And now, a “valid transition” becomes easy to enforce: it’s an amount “flowing” from one of those bins to another. For example, turning a &lt;code&gt;1&lt;/code&gt; into a &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;1-3-0-1-0-2-1&lt;/code&gt; turns it into &lt;code&gt;1-2-1-1-0-2-1&lt;/code&gt;. We took one of the three 1s and turned them into a single 2. This “flowing” operation automatically gives us a valid coordinate without any re-normalizing necessary!&lt;/p&gt;
&lt;p&gt;In this light, we now have an algorithm to compute neighbors without requiring re-normalization: we can walk bin-to-bin, “flowing” components from our origin vector to our new vector. We no longer have to try all &lt;span class=&#34;math inline&#34;&gt;\(3^d-1\)&lt;/span&gt; (exponential) candidates and re-normalize: we can now only iterate through the ones we care about.&lt;/p&gt;
&lt;p&gt;The tricky math is now in computing the multiplicities. Interestingly enough, in this case, the &lt;em&gt;reverse&lt;/em&gt; direction is actually easier to conceptualize than the forward direction. Good for us, because that’s the direction we actually need!&lt;/p&gt;
&lt;p&gt;Let’s imagine we start at &lt;code&gt;0-2-1-3-0&lt;/code&gt; (&lt;code&gt;1,1,2,3,3,3&lt;/code&gt;) and “flow” to &lt;code&gt;0-0-5-0-0&lt;/code&gt; (&lt;code&gt;2,2,2,2,2&lt;/code&gt;) by dumping all our bins into 2. How many ways could this flow happen? The answer happens to be the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multinomial_theorem&#34;&gt;multinomial coefficient&lt;/a&gt; &lt;span class=&#34;math inline&#34;&gt;\(5 \choose {2,1,3}\)&lt;/span&gt; (or &lt;span class=&#34;math inline&#34;&gt;\(5! / (2!\,1!\,3!)\)&lt;/span&gt;): there are 5! ways to end up with 5 in the bin, but that &lt;code&gt;5&lt;/code&gt; came from contributions of &lt;code&gt;2+1+3&lt;/code&gt; from either side, and so we divide by the ways we could pick from those contributing bins (2!, 1!, and 3!).&lt;/p&gt;
&lt;p&gt;Finally, we have to treat multiplicities for transitions from 0 to 1 slightly differently, because they can arise either a 0 to 1 transition or a 0 to -1 transition. This comes out to a multiplication of &lt;span class=&#34;math inline&#34;&gt;\(2^n\)&lt;/span&gt; at the end (n being the amount of 0-to-1 flow). Because of this special care, it’s actually more convenient to fill in bin-by-bin “backwards”, from the 6 slot to the 5 slot to the 4 slot, etc., because your options at the 0 component are already pre-determined for you by the choices you have already made. It keeps the tree a more manageable shape.&lt;/p&gt;
&lt;p&gt;Alright, enough words, let’s look at this in action! The following element shows the &lt;em&gt;tree&lt;/em&gt; describing all the ways you can flow from bin to bin. As an example, let’s look the 6D case of ways each point is a neighbor of &lt;code&gt;0,2,2,3&lt;/code&gt; (&lt;code&gt;1-0-2-1&lt;/code&gt;), which you can pick from the drop-down.&lt;/p&gt;
&lt;div id=&#34;golTree&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 8:&lt;/strong&gt; General Neighbor Multiplicity Algorithm&lt;/p&gt;
&lt;div id=&#34;golTreeCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, each “branch” in the tree (reading from left to right) is a different way to fill in a given bin, from right to left. At each node, the displayed upper vector is the “source” vector, and the lower vector is the “target” vector we build bin-by-bin. Bin-by-bin, we begin to move components from our source vector into our target vector. The branches in the tree reflects different ways we can commit a bin in our target vector. For example, at the very first split, we can either pick our final vector to be &lt;code&gt;?-?-?-?-0&lt;/code&gt; (leaving that 3 bin alone) or &lt;code&gt;?-?-?-?-1&lt;/code&gt; (swiping a component from that 3 bin in the source vector). The operation shown to the right of the node represents how we modify our weights according to the choices we make according to the logic above. The nodes on the far right also show the end products: the actual neighbors, along with their multiplicities.&lt;/p&gt;
&lt;p&gt;If you mouse-over or tap a node, it’ll highlight the trace from the beginning to the node you are highlighting, so you can see all of the choices made, as well as all the operations applied to our running multiplicity counter at each step. It’ll also show the contributions from the left, center, and right of the current bin being picked (the &lt;span class=&#34;math inline&#34;&gt;\(2+1+3\)&lt;/span&gt; in the example above), and also the “regular” vector representation. For example, &lt;code&gt;&amp;lt;[2,2],2,4&amp;gt;&lt;/code&gt; means that that node has already committed to having &lt;code&gt;&amp;lt;?,?,2,4&amp;gt;&lt;/code&gt; in the target vector, but still has two 2s in the source vector to pull in and distribute.&lt;/p&gt;
&lt;p&gt;One final thing we need to keep track of is to not count a point transitioning to itself if it results from no actual internal changes (this is the “minus one” in &lt;span class=&#34;math inline&#34;&gt;\(3^d-1\)&lt;/span&gt;: we should not include the single original point itself, but we &lt;em&gt;should&lt;/em&gt; count extra occurrences of the original point if it arose from a reflection). This can be done by checking if each of our bin choices involved exactly no inter-bin flows (they were all of the form &lt;code&gt;0+x+0&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Phew! That’s a bit of a mathematical doozy, huh? But trust me when I say it’s easier to understand if play around with the interactive element and follow along the traces. After a few examples in different dimensions, it might start to make sense. Try looking at the lower dimensions too to see if they match up with what we figured out before.&lt;/p&gt;
&lt;p&gt;You can also flip the switch on the element to compute reverse and forward neighbors. Luckily, as we noted before, if a point is a forward neighbor, it is also a reverse neighbor. This means that the branching structure for forward and reverse neighbor trees are exactly the same; the only difference is how the multiplicities are calculated. In this case, the forward direction is just the original calculation “reversed”! The diagram shows how the multiplicities are accumulated; feel free to try to work out exactly how this works as a fun exercise :)&lt;/p&gt;
&lt;p&gt;And with that, we have tackled the reverse neighbor weights problem with some branching bin flows and combinatorics!&lt;/p&gt;
&lt;h2 id=&#34;stacks-on-stacks-visualizing-arbitrary-dimensions&#34;&gt;Stacks On Stacks: Visualizing Arbitrary Dimensions&lt;/h2&gt;
&lt;p&gt;You might have noticed that ever since our 4D simulation, we haven’t had a new visualization of simulation, despite now having higher dimensions in our grasp. Why not?&lt;/p&gt;
&lt;p&gt;Well, there’s the question of &lt;em&gt;how&lt;/em&gt; you might even visualize this. You can “zoom out” and take higher-dimensional slices of our 4D visualization and repeat this ad nauseam, but that doesn’t really add anything or give any insight as to what’s really going on.&lt;/p&gt;
&lt;p&gt;I believe that this is one of the things that caused us to all collectively get “stuck” together around 20 dimensions. The rush of the revelations one after within a single week pushed us into trying many different things. I had a couple of dead-end forays into pre-cacheing and had a lot of code (that I was ecstatic to be able to later delete) working with an sqlite3 database.&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another factor that probably contributed to the overall lull was that Advent of Code was still running, and we all still enjoyed doing the new puzzles every day. But soon, Christmas passed, the daily rush of doing new puzzles faded, and we started to return back to tinkering on this hyper-dimensional game of life puzzle. It wouldn’t be until January 1st, 2021 (just over two weeks after the puzzle originally came out) that a new revelation arose that would pave the way shoot far past 20D.&lt;/p&gt;
&lt;p&gt;It was &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfb6zx/day_17_getting_to_t6_at_for_higher_spoilerss/ghre3ce/&#34;&gt;Michal Marsalek’s coset counts post&lt;/a&gt; that set the stage. From the beginning, Michal had always tracked the number of cell cosets at the end of the simulation (the number of active “normalized” cells), and had been exploring the relationship between dimension and coset counts. The discovery was that after a certain “saturation point” (6D for Michal’s set, 9D for Peter’s set, 7D for my set), all of the coset counts were &lt;em&gt;perfectly quadratic&lt;/em&gt;! For mine, it followed the relationship &lt;span class=&#34;math inline&#34;&gt;\(d^2 + 109d + 70\)&lt;/span&gt; exactly for 7D and higher.&lt;/p&gt;
&lt;p&gt;My best guess as to why this was happening is that, at 7D and above, we enter a domain of points where, before t=6, &lt;em&gt;every&lt;/em&gt; point is at some sort of reflective boundary. Remember that even for 4D, we had really odd behavior at the reflective boundaries/edge of the wedge. There wasn’t enough room for many points to “stretch their wings” — every single one is at one reflective boundary or another. Being a boundary point corresponds to having a “bins” encoding with any bin greater than one or anything in the 0 bin (ie, &lt;code&gt;1-0-0-0&lt;/code&gt; and &lt;code&gt;0-2-0&lt;/code&gt; are all points on a reflective boundary).&lt;/p&gt;
&lt;p&gt;Unfortunately, having a closed-form way to compute coset counts doesn’t actually give us a way to compute the final state itself (that we know of, yet), since it doesn’t tell us &lt;em&gt;which&lt;/em&gt; cosets are active, just how many. However, this prompted me to investigate a little bit more about what was causing this pattern and how these cosets were distributed. To do this, I tried a new way to visualize things.&lt;/p&gt;
&lt;p&gt;In our simulation, x and y components are fundamentally different from the others; we could actually talk about each point as a tuple &lt;code&gt;(&amp;lt;x,y&amp;gt;, {higher dims})&lt;/code&gt;. Also, points are usually &lt;em&gt;dense&lt;/em&gt; in &lt;code&gt;&amp;lt;x,y&amp;gt;&lt;/code&gt; (a significant fraction of the xy space has at least one point), but &lt;em&gt;sparse&lt;/em&gt; in higher dimensions (a very small fraction of the higher-dimensional space actually has a point in it). Instead of keeping our active points as a set of cosets, we could treat it as a map of &lt;code&gt;&amp;lt;x,y&amp;gt;&lt;/code&gt; points to the higher-dimension slice cosets that live “under them”. That is, instead of keeping one giant set as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;lt;1,2,1,1,3&amp;gt;, &amp;lt;3,1,1,1,4&amp;gt;, &amp;lt;1,2,0,0,5&amp;gt;, &amp;lt;4,2,3,4,4&amp;gt;, &amp;lt;3,1,2,2,2&amp;gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we could instead keep a map of sets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;1,2&amp;gt;: { &amp;lt;1,1,3&amp;gt;, &amp;lt;0,0,5&amp;gt; }
&amp;lt;3,1&amp;gt;: { &amp;lt;1,1,4&amp;gt;, &amp;lt;2,2,2&amp;gt; }
&amp;lt;4,2&amp;gt;: { &amp;lt;3,3,4&amp;gt; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and propagate &lt;em&gt;that&lt;/em&gt; in our simulation. I like to call those sets under each 2d point (ie, the &lt;code&gt;{&amp;lt;1,1,3&amp;gt;, &amp;lt;0,0,5&amp;gt;}&lt;/code&gt;) a “coset stack”.&lt;/p&gt;
&lt;p&gt;I did this initially to investigate the nature of the cosets that were showing up, but once I plotted it and animated things, I realized that in doing this, we are reducing the entire hyper-dimensional problem &lt;em&gt;back to a variant of 2D cellular automaton&lt;/em&gt;! This whole thing becomes reframed…instead of a mind-bending hyper-dimensional deal, it’s now simply &lt;em&gt;multivalued 2D cellular automaton&lt;/em&gt; with funky rules! It’s like a normal 2D game of life, but with funky rules for 2D points spreading to each other.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; step_with_stacks(stacks):&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;    neighbs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_2d, pt_stack &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; stacks.items():&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# higher-dimension components&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_nd &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pt_stack:&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;            rev_neighbs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Counter(reverse_neighbs(pt_nd))&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;            rev_neighbs_incl_self &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; rev_neighbs &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; Counter(pt_nd)&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;# the actual propagation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;# 1. add in the same stack; don&amp;#39;t include self&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; pt_2d &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs:&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;                neighbs[pt_2d] &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; rev_neighbs&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;                neighbs[pt_2d] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; rev_neighbs&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;# 2. add to nieghboring stacks; include self&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; ngb_2 &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; mk_neighbs(pt_2d)[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:]:&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ngb_2 &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs:&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;                    neighbs[ngb_2] &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; rev_neighbs_incl_self&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;                    neighbs[ngb_2] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; rev_neighbs_incl_self&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; validate(pt_2d, pt_nd, ncount):&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; pt_nd &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; stacks[pt_2d]:&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;or&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; {pt_2d: &lt;span class=&#34;bu&#34;&gt;frozenset&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;                       pt_nd &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_nd, n &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pt_counts.items()&lt;/span&gt;
&lt;span id=&#34;cb9-30&#34;&gt;&lt;a href=&#34;#cb9-30&#34;&gt;&lt;/a&gt;                             &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; validate(pt_2d, pt_nd, n)&lt;/span&gt;
&lt;span id=&#34;cb9-31&#34;&gt;&lt;a href=&#34;#cb9-31&#34;&gt;&lt;/a&gt;                   )&lt;/span&gt;
&lt;span id=&#34;cb9-32&#34;&gt;&lt;a href=&#34;#cb9-32&#34;&gt;&lt;/a&gt;              &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_2d, pt_counts &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs&lt;/span&gt;
&lt;span id=&#34;cb9-33&#34;&gt;&lt;a href=&#34;#cb9-33&#34;&gt;&lt;/a&gt;           }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the final animation: we plot a single 2D grid, and each cell is colored according to the size of the coset stack under that point (how many points exist with that &lt;code&gt;&amp;lt;x,y&amp;gt;&lt;/code&gt;). You can slide this one up all the way to 10D to simulate it in your browser!&lt;/p&gt;
&lt;div id=&#34;golFlat&#34; class=&#34;highlightbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Element 9:&lt;/strong&gt; N-D Game of Life&lt;/p&gt;
&lt;div id=&#34;golFlatCont&#34;&gt;
&lt;p&gt;Please enable Javascript&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(A lot of examples with symmetries look nice here, such as &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=██▟█.▜███.███▙.█▛██&#34; class=&#34;loadpoints&#34;&gt;spiral galaxy&lt;/a&gt; up to 6D and &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=▛▀▀▜.▌▛▜▐.▌▙▟▐.▙▄▄▟&#34; class=&#34;loadpoints&#34;&gt;bulls-eye&lt;/a&gt;; the alternating symmetries of &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=████.▄▗▖▄.▀▝▘▀.████&#34; class=&#34;loadpoints&#34;&gt;broken bar code&lt;/a&gt; look nice too! But honestly, at higher-dimensions, almost any input ends up generating appealing gradients, like &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=____._▝▖_._▀▘_.____&#34; class=&#34;loadpoints&#34;&gt;glider&lt;/a&gt; and &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=▛▜▙▐.▜▚▗_.█▟▄▘.▟▌▟█&#34; class=&#34;loadpoints&#34;&gt;my own assigned input&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Play around with it, it’s the big finale! :D You can move all the way up to 10D; some older devices may struggle, but on my lower-end cell phone it seems to run in less than a second. If you mouse-over a cell, the text box will show all of the slice cosets where that xy cell is alive in (the “coset stack”). If you click on a cell, your selection will “lock” on that &lt;code&gt;&amp;lt;x,y&amp;gt;&lt;/code&gt; coordinate as you change dimensions and time.&lt;/p&gt;
&lt;p&gt;Some interesting things you might notice:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;At t=6, it looks like 8D, 9D, 10D (and sometimes 6D,7D) all have the &lt;em&gt;same&lt;/em&gt; exact 2D cells “on”. They’re identical except for slightly different stacks above each of those cells.&lt;/p&gt;
&lt;p&gt;To see this clearly, set your time to t=6 and drag your dimension slider back and forth to see all of the higher-dimensions look identical in shape.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At t=2, t=4, past 5D or so, the state is exactly the same for all dimensions for any initial condition I have tried! We could easily find t=4 for 100D or even 200D: they’re identical!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lot of xy cells share identical coset stacks…more on that later!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Not only is it kinda pretty (in my humble opinion), it also demonstrates that this whole ordeal is really “just a multivalued 2D cellular automaton”: it’s like a “multi-valued” Game of Life, where instead of cells being on and off, they are one of several discrete choices of values. Instead of a “binary” game of life with a boolean at each cell, it’s an “integer” game of life with a finite choice at each cell.&lt;/p&gt;
&lt;p&gt;Because there are &lt;span class=&#34;math inline&#34;&gt;\({ {\hat{d}}+t} \choose t\)&lt;/span&gt; slice cosets for a given dimension and time, it means that our game is a &lt;span class=&#34;math inline&#34;&gt;\(2^{ { \hat{d} + t} \choose t }\)&lt;/span&gt;-valued game of life, where each cell can be one of that many options (each slice coset and be present or not). That means at 2D (&lt;span class=&#34;math inline&#34;&gt;\(\hat{d} = 0\)&lt;/span&gt;), we have a normal 2-valued game of life (&lt;span class=&#34;math inline&#34;&gt;\(2^1\)&lt;/span&gt;), at 3D we have &lt;span class=&#34;math inline&#34;&gt;\(7 \choose 6\)&lt;/span&gt; or 7 possible points at t=6, so that’s a &lt;span class=&#34;math inline&#34;&gt;\(2^7\)&lt;/span&gt; or 128-valued game of life, at 4D we have &lt;span class=&#34;math inline&#34;&gt;\(8 \choose 6\)&lt;/span&gt; or 28 possible points at t=6, and so that’s a &lt;span class=&#34;math inline&#34;&gt;\(2^{28}\)&lt;/span&gt; or 268,435,456-valued game of life.&lt;/p&gt;
&lt;p&gt;You can see this demonstrated in the simulation above, as well. As you progress, each 2D cell “spreads” to its neighbors according to some complex rule; it’s like watching 2d cells interact with each other in complex ways, without ever even having to think of higher dimensions.&lt;/p&gt;
&lt;p&gt;Implementing things this way (and taking advantage of the fact that coset stacks are usually very sparse and have few members) gave a nice conceptual shake-up. But there’s one final thing that this view would unlock that would make the biggest difference.&lt;/p&gt;
&lt;h3 id=&#34;repeated-stacks&#34;&gt;Repeated Stacks&lt;/h3&gt;
&lt;p&gt;You might have noticed in the final 10D simulation, if you mouse over an xy cell, it’ll also highlight over all of the other xy cells that hold the same coset stack. For most initial starting positions, you might notice something maybe even more curious — a &lt;em&gt;lot&lt;/em&gt; of those stacks are duplicated over many xy cells.&lt;/p&gt;
&lt;p&gt;In my &lt;a href=&#34;https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html?points=▛▜▙▐.▜▚▗_.█▟▄▘.▟▌▟█&#34; class=&#34;loadpoints&#34;&gt;personal puzzle input&lt;/a&gt; (click to load into the simulation), &lt;em&gt;most&lt;/em&gt; of the stacks were duplicated many times across different xy cells. If you highlight the cells in any arbitrary starting condition through t=6, you’ll see too that many (if not most) xy cells have multiple other xy cells that have identical stacks to them.&lt;/p&gt;
&lt;p&gt;This final insight yields the final optimization we have discovered, as of time of writing. We can actually treat an &lt;em&gt;entire stack&lt;/em&gt; as an “action” that is spread to the xy neighbors: The stack under &lt;code&gt;&amp;lt;x,y&amp;gt;=&amp;lt;3,4&amp;gt;&lt;/code&gt; is spread to all its eight 2D neighbors identically (and to itself, too, in a way that excludes the original stack itself). That means if you have a stack, you can compute the contribution to a neighbor (expensive) it has &lt;em&gt;one time&lt;/em&gt;, and then &lt;em&gt;repeat that same contribution&lt;/em&gt; to every occurrence of a stack. So if a stack is repeated ten times over ten different xy stacks, you only need to compute it once and propagate it to all 9x10 neighbors of those stacks (nine neighbors, including self, times each of the 10 repetitions), for a savings of x90! This can be done by storing map of stacks to contributions as a cache.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode python&#34;&gt;&lt;code class=&#34;sourceCode python&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; step_with_stack_cache(stacks):&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;    neighbs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;    stack_cache &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {}&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_2d, pt_stack &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; stacks.items():&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# get what to place in the same xy cell, and what to place in neighbor&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# xy cells&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; pt_stack &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; stack_cache:&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;# get it from the cache if it exists&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;            (rev_neighbs, rev_neighbs_incl_self) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; stack_cache[pt_stack]&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;# otherwise, build it and store it in the cache&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;            rev_neighbs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; Counter()&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_nd &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pt_stack:&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;                rev_neighbs &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; Counter(reverse_neighbs(pt_nd))&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;            rev_neighbs_incl_self &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; rev_neighbs &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; Counter(pt_stack)&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;            stack_cache[pt_stack] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; (rev_neighbs, rev_neighbs_incl_self)&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# the actual propagation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# 1. add in the same stack; don&amp;#39;t include self&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; pt_2d &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs:&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;            neighbs[pt_2d] &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; rev_neighbs&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;            neighbs[pt_2d] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; rev_neighbs&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;# 2. add to nieghboring stacks; include self&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; ngb_2 &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; mk_neighbs(pt_2d)[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;:]:&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ngb_2 &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs:&lt;/span&gt;
&lt;span id=&#34;cb10-28&#34;&gt;&lt;a href=&#34;#cb10-28&#34;&gt;&lt;/a&gt;                neighbs[ngb_2] &lt;span class=&#34;op&#34;&gt;+=&lt;/span&gt; rev_neighbs_incl_self&lt;/span&gt;
&lt;span id=&#34;cb10-29&#34;&gt;&lt;a href=&#34;#cb10-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb10-30&#34;&gt;&lt;a href=&#34;#cb10-30&#34;&gt;&lt;/a&gt;                neighbs[ngb_2] &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; rev_neighbs_incl_self&lt;/span&gt;
&lt;span id=&#34;cb10-31&#34;&gt;&lt;a href=&#34;#cb10-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-32&#34;&gt;&lt;a href=&#34;#cb10-32&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; validate(pt_2d, pt_nd, ncount):&lt;/span&gt;
&lt;span id=&#34;cb10-33&#34;&gt;&lt;a href=&#34;#cb10-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; pt_2d &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; stacks &lt;span class=&#34;kw&#34;&gt;and&lt;/span&gt; pt_nd &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; stacks[pt_2d]:&lt;/span&gt;
&lt;span id=&#34;cb10-34&#34;&gt;&lt;a href=&#34;#cb10-34&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;or&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-35&#34;&gt;&lt;a href=&#34;#cb10-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb10-36&#34;&gt;&lt;a href=&#34;#cb10-36&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ncount &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-37&#34;&gt;&lt;a href=&#34;#cb10-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-38&#34;&gt;&lt;a href=&#34;#cb10-38&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; {pt_2d: &lt;span class=&#34;bu&#34;&gt;frozenset&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb10-39&#34;&gt;&lt;a href=&#34;#cb10-39&#34;&gt;&lt;/a&gt;                       pt_nd &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_nd, n &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; pt_counts.items()&lt;/span&gt;
&lt;span id=&#34;cb10-40&#34;&gt;&lt;a href=&#34;#cb10-40&#34;&gt;&lt;/a&gt;                             &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; validate(pt_2d, pt_nd, n)&lt;/span&gt;
&lt;span id=&#34;cb10-41&#34;&gt;&lt;a href=&#34;#cb10-41&#34;&gt;&lt;/a&gt;                   )&lt;/span&gt;
&lt;span id=&#34;cb10-42&#34;&gt;&lt;a href=&#34;#cb10-42&#34;&gt;&lt;/a&gt;              &lt;span class=&#34;cf&#34;&gt;for&lt;/span&gt; pt_2d, pt_counts &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; neighbs&lt;/span&gt;
&lt;span id=&#34;cb10-43&#34;&gt;&lt;a href=&#34;#cb10-43&#34;&gt;&lt;/a&gt;           }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this final piece of the puzzle, I was able to reach 18D &lt;em&gt;3 seconds&lt;/em&gt; in my Haskell solution, and 30D in 5 minutes! Michal Marsalek was also able to build this into their fast Nim solver to &lt;a href=&#34;https://www.reddit.com/user/MichalMarsalek/&#34;&gt;reach 40D in 8 minutes, 50D in 32 minutes, 60D in 120 minutes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And as far as I know, this seems to be where things stand today (Feburary 2021).&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Hope you enjoyed this journey! My hope is that I was able to convey a fraction of the excitement, wonder, and mystery I felt during the process. At every point, we had no reason to believe something better would come around the corner, but we held on to a hope and faith that kept on rewarding us.&lt;/p&gt;
&lt;p&gt;Visualization and different perspectives seem to drive almost every revelation — from the visually striking symmetries of the 3D and 4D simulations, the explorations of how neighbor relationships work, the insight that we could treat the entire problem as a fancy multivalued 2D game of life…all of it came about from being able to see the problem visually in different ways. At other times it was a simple change in perspective to find a better way of encoding variants or looking at how a specific number changed. I know for myself, the next time I try to explore something like this, I will try to apply what I learned to always reach for visualization sooner. Even dead-end visualizations can sometimes provide a new depth to the puzzle that you might appreciate later on.&lt;/p&gt;
&lt;p&gt;Another thing I hope was apparent was the power of community! I know I definitely would not have had as much fun doing this if it wasn’t for the vibrant Advent of Code “Ante-Pushing” community. What I’ve described is just &lt;em&gt;one story&lt;/em&gt; (Day 17, 2020) out of so many that Advent of Code community members routinely explore together (through 25 puzzles each year for five years). Most of these discoveries were fun because we always had somebody to share them with, or a way to encourage each other and strive for a common goal. I’m definitely lucky to be standing on giants as a part of a talented and passionately curious community that’s excited to explore things like this. Michal Marsalek &lt;a href=&#34;https://github.com/MichalMarsalek/Advent-of-code/blob/master/2020/misc/day17-highdims/ND_gol_with_low_dimensional_initial_state.pdf&#34;&gt;has their own writeup of the discoveres mentioned here&lt;/a&gt;, that you should check out too if you have the time!&lt;/p&gt;
&lt;p&gt;Thank you to so many people — Michal Marsalek, Peter Tseng, leftylink, sim64, ephemient, yitz, cyphase, phaazon, glguy, /u/cetttbycettt, /u/bsterc, /u/flwyd, and so many others that I probably missed. An especially deep thanks to &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt; for hosting a wonderful event like Advent of Code every year. Finally, a profoundly deep thanks to the late John Conway, who revealed to us how much joy can come from the exploration of all things mathematical, a genius who was taken away from this world much too soon.&lt;/p&gt;
&lt;p&gt;And of course, in making this post, I’m inviting you, the reader, to join us along in this journey as well! It’s hardly over :) Now that you’re up to speed with all of us, I’d be excited to hear about anything you might discover while playing around with this too!&lt;/p&gt;
&lt;p&gt;Looking forward at least, there are a some open threads still.&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Notice on the &lt;a href=&#34;#gol4D&#34;&gt;4D simulation&lt;/a&gt;, very soon after simulations start, the two diagonals become very empty, and especially the 3x3 region at the origin where they intersect. It turns out that reflection symmetry boundaries are very inhospitable because they have &lt;em&gt;so many neighbors&lt;/em&gt; after reflection, especially at higher dimensions (see the top-right slice at each q level in &lt;a href=&#34;#golSyms5D&#34;&gt;the 5D symmetries&lt;/a&gt;). Could these “dead zones” be extended and exploited at higher dimensions?&lt;/li&gt;
&lt;li&gt;The most promising to me: for t=6, the exact same xy cells are always inhabited for any dimension past 7D or so, and the stacks at each seem to only change slightly from dimension to dimension. If we can analytically find how the stacks at any given position change between 9D and 10D, 10D and 11D, etc., then it will be easy to jump directly to t=6 at 100D without simulating anything. Another way to say this is — can we simulate by fixing t and stepping d, instead of fixing d and stepping t?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Who can tell how far we can go? &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfb6zx/day_17_getting_to_t6_at_for_higher_spoilerss/gia880d/&#34;&gt;Michal&lt;/a&gt; has a personal goal that I would also be very happy to reach:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I won’t be satisfied until I implement a solution that runs in polynomial time in both t and d.&lt;/p&gt;
&lt;p&gt;— Michal Marsalek&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Will you, dear reader, be the one to take us there? :)&lt;/p&gt;
&lt;h2 id=&#34;special-thanks&#34;&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;I am very humbled to be supported by an amazing community, who make it possible for me to devote time to researching and writing these posts. Very special thanks to my supporter at the “Amazing” level on &lt;a href=&#34;https://www.patreon.com/justinle/overview&#34;&gt;patreon&lt;/a&gt;, Josh Vera! :)&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;And…there’s actually a neat optimization we can use (brought to our attention by &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfb6zx/day_17_getting_to_t6_at_for_higher_spoilerss/ghmllf8&#34;&gt;Peter Tseng&lt;/a&gt;) to avoid the check of the original set in step 2c above: when you iterate over each point, increment the eight neighbors’ map values by &lt;em&gt;2&lt;/em&gt;, and then increment the point itself by 1. Then in the final integer under each key, &lt;code&gt;n / 2&lt;/code&gt; or &lt;code&gt;n &amp;gt;&amp;gt; 1&lt;/code&gt; gives you the number of neighbors and &lt;code&gt;n % 2&lt;/code&gt; (modulus) gives you whether or not that cell was alive.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;There’s another optimization too you could use that would allow you to ignore this and just treat a cell as its own neighbor; you’d have to tweak the live-or-dead rules slightly, but it does simplify a lot of the propagation logic.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;For dramatic effect, I’ve omitted the fact that while there are only 3003 possible higher-dimensional points, there are &lt;span class=&#34;math inline&#34;&gt;\(20^2 \times 3003\)&lt;/span&gt; actual unique points possible factoring in the 20x20 x-y grid. Still, it’s a pretty big improvement over the original situation (&lt;span class=&#34;math inline&#34;&gt;\(20^2 \times 815730721\)&lt;/span&gt;).&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;It’s also interesting to note that above 9D (where there are 7 higher-dimensional coordinates), there is always at least one duplicated number. Although I don’t really know a way to explicitly exploit that fact even now, it does mean that there’s a qualitative difference between 9D and below and 10D and above: anything above 9D is…especially degenerate.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;One useful lasting thing I did find (that I won’t spend too much time on here) was a way to &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/kfb6zx/day_17_getting_to_t6_at_for_higher_spoilerss/gim68l0/&#34;&gt;index into an enumeration&lt;/a&gt; of all of the slice cosets (that is, all the normalized higher-dimensional coordinates). I no longer store &lt;code&gt;&amp;lt;z,w,...&amp;gt;&lt;/code&gt; points as vectors, but rather as a single integer representing their index in that enumeration, which is easier to access and store. I also found a way to do streaming decoding and encoding between that index and the components it represents, allowing me to stream neighbor weights in constant time. This dense index encoding was actually really useful in implementing the Javascript demos on this page :)&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/degenerate-hyper-dimensional-game-of-life.html</guid><pubDate>Thu, 11 Feb 2021 18:45:30 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2021-02-11</date></item><item><title>Advent of Code 2020: Haskell Solution Reflections for all 25 Days</title><link>https://blog.jle.im/entry/advent-of-code-2020.html</link><description>&lt;p&gt;Merry Christmas and Happy New Years, to all!&lt;/p&gt;
&lt;p&gt;Once again, every year I like to participate in Eric Wastl’s &lt;em&gt;&lt;a href=&#34;http://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;&lt;/em&gt;! It’s a series of 25 Christmas-themed puzzles that release every day at midnight — there’s a cute story motivating each one, usually revolving around saving Christmas. Every night my friends and I (including the good people of freenode’s &lt;code&gt;##advent-of-code&lt;/code&gt; channel) talk about the puzzle and creative ways to solve it (and also see how my &lt;a href=&#34;https://twitter.com/mstk/status/1343027484808380416&#34;&gt;bingo card&lt;/a&gt; is doing). The &lt;a href=&#34;https://www.reddit.com/r/adventofcode&#34;&gt;subreddit community&lt;/a&gt; is also pretty great as well! And an even nicer thing is that the puzzles are open-ended enough that there are often many ways of approaching them…including some approaches that can leverage math concepts in surprising ways, like &lt;a href=&#34;https://blog.jle.im/entry/alchemical-groups.html&#34;&gt;group theory&lt;/a&gt;, &lt;a href=&#34;https://blog.jle.im/entry/shifting-the-stars.html&#34;&gt;galilean transformations and linear algebra&lt;/a&gt;, and &lt;a href=&#34;https://blog.jle.im/entry/shuffling-things-up.html&#34;&gt;more group theory&lt;/a&gt;. Many of the puzzles are often simple data transformations that Haskell is especially good at!&lt;/p&gt;
&lt;p&gt;Speaking of Haskell, I usually do a write-up for every day I can get around to about unique insights that solving in Haskell can provide to each different puzzle. I did them in &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md&#34;&gt;2017&lt;/a&gt;, &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md&#34;&gt;2018&lt;/a&gt;, and &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md&#34;&gt;2019&lt;/a&gt;, but I never finished every day. But 2020 being what it is, I was able to finish! :D&lt;/p&gt;
&lt;p&gt;You can find &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections.md&#34;&gt;all of them here&lt;/a&gt;, but here are links to each individual one. Hopefully you can find them helpful. And if you haven’t yet, why not try &lt;a href=&#34;http://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; yourself? :) And drop by the freenode ##advent-of-code channel, we’d love to say hi and chat, or help out! Thanks all for reading, and also thanks to Eric for a great event this year, as always!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day01.md&#34;&gt;Day 1 - Report Repair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day02.md&#34;&gt;Day 2 - Passport Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day03.md&#34;&gt;Day 3 - Toboggan Trajectory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day04.md&#34;&gt;Day 4 - Passport Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day05.md&#34;&gt;Day 5 - Binary Boarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day06.md&#34;&gt;Day 6 - Custom Customs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day07.md&#34;&gt;Day 7 - Handy Haversacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day08.md&#34;&gt;Day 8 - Handheld Halting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day09.md&#34;&gt;Day 9 - Encoding Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day10.md&#34;&gt;Day 10 - Adapter Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day11.md&#34;&gt;Day 11 - Seating System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day12.md&#34;&gt;Day 12 - Rain Risk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day13.md&#34;&gt;Day 13 - Shuttle Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day14.md&#34;&gt;Day 14 - Docking Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day15.md&#34;&gt;Day 15 - Rambunctious Recitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day16.md&#34;&gt;Day 16 - Ticket Translation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day17.md&#34;&gt;Day 17 - Conway Cubes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day18.md&#34;&gt;Day 18 - Operation Order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day19.md&#34;&gt;Day 19 - Monster Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day20.md&#34;&gt;Day 20 - Jurassic Jigsaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day21.md&#34;&gt;Day 21 - Allergen Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day22.md&#34;&gt;Day 22 - Crab Combat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day23.md&#34;&gt;Day 23 - Crab Cups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day24.md&#34;&gt;Day 24 - Lobby Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections-out/day25.md&#34;&gt;Day 25 - Combo Breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/advent-of-code-2020.html</guid><pubDate>Thu, 31 Dec 2020 04:35:15 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2020-12-31</date></item><item><title>Roll your own Holly Jolly streaming combinators with Free</title><link>https://blog.jle.im/entry/holly-jolly-streaming-combinators.html</link><description>&lt;p&gt;Hi! Welcome, if you’re joining us from the great &lt;a href=&#34;https://adventofhaskell.com/&#34;&gt;Advent of Haskell 2020&lt;/a&gt; event! Feel free to grab a hot chocolate and sit back by the fireplace. I’m honored to be able to be a part of the event this year; it’s a great initiative and harkens back to the age-old Haskell tradition of bite-sized Functional Programming “advent calendars”. I remember when I was first learning Haskell, &lt;a href=&#34;https://ocharles.org.uk/pages/2012-12-01-24-days-of-hackage.html&#34;&gt;Ollie Charles’ 24 Days of Hackage series&lt;/a&gt; was one of my favorite series that helped me really get into the exciting world of Haskell and the all the doors that functional programming can open.&lt;/p&gt;
&lt;p&gt;All of the posts this year have been great — they range from insightful reflections on the nature of Haskell and programming in Haskell, or also on specific language features. This post is going to be one of the “project-based” ones, where we walk through and introduce a solidly &lt;em&gt;intermediate&lt;/em&gt; Haskell technique as it applies to building a useful general toolset. I’m going to be exploring the “functor combinator style” where you identify the interface you want, associate it with a common Haskell typeclass, pick your primitives, and automatically get the ability to imbue your primitives with the structure you need. I’ve talked about this previously with:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jle.im/entry/free-alternative-regexp.html&#34;&gt;Applicative regular expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jle.im/entry/functor-combinatorpedia.html&#34;&gt;The functor combinatorpedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jle.im/entries/series/+enhancing-functor-structures.html&#34;&gt;Bidirectional serializers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jle.im/entry/interpreters-a-la-carte-duet.html&#34;&gt;Composable interpreters&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and I wanted to share a recent application I have been able to use apply it with where just &lt;em&gt;thinking&lt;/em&gt; about the primitives gave me almost all the functionality I needed for a type: composable streaming combinators. This specific application is also very applicable to integrate into any &lt;a href=&#34;https://www.stephendiehl.com/posts/decade.html#algebraic-effect-systems&#34;&gt;composable effects system&lt;/a&gt;, since it’s essentially a monadic interface.&lt;/p&gt;
&lt;p&gt;In a way, this post could also be seen as capturing the spirit of the holidays by reminiscing about the days of yore — looking back at one of the more exciting times in modern Haskell’s development, where competing composable streaming libraries were at the forefront of practical innovation. The dust has settled on that a bit, but it every time I think about composable streaming combinators, I do get a bit nostalgic :)&lt;/p&gt;
&lt;p&gt;This post is written for an &lt;em&gt;intermediate&lt;/em&gt; Haskell audience, and will assume you have a familiarity with monads and monadic interfaces, and also a little bit of experience with monad transformers. Note — there are many ways to arrive at the same result, but this post is more of a demonstration of a certain style and approach that has benefited my greatly in the past.&lt;/p&gt;
&lt;p&gt;All of the code in this page &lt;a href=&#34;https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs&#34;&gt;can be found online at github&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;dreaming-of-an-effectful-christmas&#34;&gt;Dreaming of an Effectful Christmas&lt;/h2&gt;
&lt;p&gt;The goal here is to make a system of composable pipes that are “pull-based”, so we can process data as it is read in from IO only as we need it, and never do more work than we need to do up-front or leak memory when we stop using it.&lt;/p&gt;
&lt;p&gt;So, the way I usually approach things like these is: “dress for the interface you want, not the one you have.” It involves:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Thinking of the &lt;code&gt;m a&lt;/code&gt; you want and how you would want to combine it/use it.&lt;/li&gt;
&lt;li&gt;Express the primitive actions of that thing&lt;/li&gt;
&lt;li&gt;Use some sort of free structure or effects system to enhance that primitive with the interface you are looking for.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, let’s imagine our type!&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where a &lt;code&gt;Pipe i o m a&lt;/code&gt; represents a pipe component where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: the type of the input the pipe expects from upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt;: the type of the output the pipe will be yielding upstream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: the monad that the underlying actions live in&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: the overall result of the pipe once it has terminated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One nice thing about this setup is that by picking different values for the type parameters, we can already get a nice classification for interesting subtypes:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;()&lt;/code&gt; (or universally quantified&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;) — a &lt;code&gt;Pipe () o m a&lt;/code&gt; — it means that the pipe doesn’t ever expect any sort of information upstream, and so can be considered a “source” that keeps on churning out values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;o&lt;/code&gt; is &lt;code&gt;Void&lt;/code&gt; (or universally quantified) — a &lt;code&gt;Pipe i Void m a&lt;/code&gt; — it means that the pipe will never yield anything downstream, because &lt;code&gt;Void&lt;/code&gt; has no inhabitants that could possibly be yielded.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that it acts like a “sink” that will keep on eating &lt;code&gt;i&lt;/code&gt; values without ever outputting anything downstream.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;()&lt;/code&gt; and &lt;code&gt;o&lt;/code&gt; is &lt;code&gt;Void&lt;/code&gt; (or they are both universally quantified), then the pipe doesn’t expect any sort of information upstream, and also won’t ever yield anything downstream… a &lt;code&gt;Pipe () Void m a&lt;/code&gt; is just an &lt;code&gt;m a&lt;/code&gt;! In the biz, we often call this an “effect”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;Void&lt;/code&gt; (or universally quantified) — a &lt;code&gt;Pipe i o m Void&lt;/code&gt; — it means that the pipe will never terminate, since &lt;code&gt;Void&lt;/code&gt; has no inhabitants that could it could possibly produce upon termination.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To me, I think it embodies a lot of the nice principles about the “algebra” of types that can be used to reason with inputs and outputs. Plus, it allows us to unify sources, sinks, and non-terminating pipes all in one type!&lt;/p&gt;
&lt;p&gt;Now let’s think of the interface we want. We want to be able to:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Yield a value `o` downstream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;yield ::&lt;/span&gt; o &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m ()&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Await a value `i` upstream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;await ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; i)&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Terminate immediately with a result value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Sequence pipes one-after-another:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- &amp;quot;do this until it terminates, then that one next&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | In fact let&amp;#39;s just make it a full fledged monad, why not?  We&amp;#39;re designing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- our dream interface here.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | A pipe that simply does action in the underlying monad and terminates with&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- the result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lift ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Compose pipes, linking the output of one to the input of the other&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-23&#34;&gt;&lt;a href=&#34;#cb3-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(.|) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i j m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; j o m b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b&lt;/span&gt;
&lt;span id=&#34;cb3-24&#34;&gt;&lt;a href=&#34;#cb3-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-25&#34;&gt;&lt;a href=&#34;#cb3-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Finally: run it all on a pipe expecting no input and never yielding:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-26&#34;&gt;&lt;a href=&#34;#cb3-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runPipe ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks like a complicated list…but actually most of these come from ubiquitous Haskell typeclasses like &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;Applicative&lt;/code&gt;. We’ll see how this comes into play later, when we learn how to get these instances for our types for free. This makes the actual “work” we have to do very small.&lt;/p&gt;
&lt;p&gt;So, these are going to be implementing “conduit-style” streaming combinators, where streaming actions are monadic, and monadic sequencing represents “do this after this one is done.” Because of this property, they work well as &lt;em&gt;pull-based&lt;/em&gt; pipes: yields will block until a corresponding await can accept what is yielded.&lt;/p&gt;
&lt;h3 id=&#34;put-on-those-christmas-sweaters&#34;&gt;Put on those Christmas Sweaters&lt;/h3&gt;
&lt;p&gt;“Dress for the interface you want, not the one you have”. So let’s pretend we already implemented this interface…what could we do with it?&lt;/p&gt;
&lt;p&gt;Well, can write simple sources like “yield the contents from a file line-by-line”:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L65-L72&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sourceHandleIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handle&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;sourceHandleIO handle &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;    res &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; tryJust (guard &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; isEOFError) (hGetLine handle)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; res &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt;  _   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; out &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;        yield out&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;        sourceHandle handle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that because the &lt;code&gt;i&lt;/code&gt; is universally quantified, it means that we know that &lt;code&gt;sourceFile&lt;/code&gt; never ever awaits or touches any input: it’s purely a source.&lt;/p&gt;
&lt;p&gt;We can even write a simple sink, like “await and print the results to stdout as they come”:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L83-L90&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sinkStdoutIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; o &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;sinkStdoutIO &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    inp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; await&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;        lift &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;        sinkStdout&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And maybe we can write a pipe that takes input strings and converts them to all capital letters and re-yields them:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L101-L108&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toUpperPipe ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;toUpperPipe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;    inp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; await&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;        yield (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toUpper&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;        toUpperPipe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can maybe write a pipe that stops as soon as it reads the line &lt;code&gt;STOP&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L110-L119&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;untilSTOP ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;untilSTOP &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;    inp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; await&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;STOP&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;            yield x&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;            untilSTOP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;untilSTOP&lt;/code&gt; is really sort of the crux of what makes these streaming systems useful: we only pull items from the file as we need it, and &lt;code&gt;untilSTOP&lt;/code&gt; will stop pulling anything as soon as we hit &lt;code&gt;STOP&lt;/code&gt;, so no IO will happen anymore if the upstream sink does IO.&lt;/p&gt;
&lt;h3 id=&#34;our-ideal-program&#34;&gt;Our Ideal Program&lt;/h3&gt;
&lt;p&gt;Now ideally, we’d want to write a program that lets us compose the above pipes to read from a file and output its contents to stdout, until it sees a STOP line:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L121-L126&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;samplePipeIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handle&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;samplePipeIO handle &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;       sourceHandleIO handle&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; untilSTOP&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; toUpperPipe&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; sinkStdoutIO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;setting-up-our-stockings&#34;&gt;Setting up our Stockings&lt;/h2&gt;
&lt;p&gt;Step 2 of our plan was to identify the primitive actions we want. Looking at our interface, it seems like the few things that let us “create” a &lt;code&gt;Pipe&lt;/code&gt; from scratch (instead of combining existing ones) are:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;yield  ::&lt;/span&gt; o &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m ()&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;await  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; i)&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lift   ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, we can note that &lt;code&gt;lift&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; can be gained just from having a &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;MonadTrans&lt;/code&gt; instance. So let’s assume we have those instances.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    return ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadTrans&lt;/span&gt; p &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    lift ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; p m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The functor combinator plan is to identify your primitives, and let free structures give you the instances (in our case, &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;MonadTrans&lt;/code&gt;) you need for them.&lt;/p&gt;
&lt;p&gt;So this means we only need two primitives: &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;. Then we just throw them into some machinery that gives us a free &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;MonadTrans&lt;/code&gt; structure, and we’re golden :)&lt;/p&gt;
&lt;p&gt;In the style of the &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/free&#34;&gt;free&lt;/a&gt;&lt;/em&gt; library, we’d write base functions to get an ADT that describes the primitive actions:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L22-L25&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;YieldF&lt;/span&gt; o a&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AwaitF&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The general structure of the base functor style is to represent each primitive as a constructor: include any inputs, and then a continuation on what to do if you had the result.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;For &lt;code&gt;YieldF&lt;/code&gt;, you need an &lt;code&gt;o&lt;/code&gt; to be able to yield. The second field should really be the continuation &lt;code&gt;() -&amp;gt; a&lt;/code&gt;, since the result is &lt;code&gt;()&lt;/code&gt;, but that’s equivalent to &lt;code&gt;a&lt;/code&gt; in Haskell.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;AwaitF&lt;/code&gt;, you don’t need any parameters to await, but the continuation is &lt;code&gt;Maybe i -&amp;gt; a&lt;/code&gt; since you need to specify how to handle the &lt;code&gt;Maybe i&lt;/code&gt; result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(This is specifically the structure that &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/free&#34;&gt;free&lt;/a&gt;&lt;/em&gt; expects, but this principle can be ported to any algebraic effects system.)&lt;/p&gt;
&lt;h3 id=&#34;a-christmas-surprise&#34;&gt;A Christmas Surprise&lt;/h3&gt;
&lt;p&gt;And now for the last ingredient: we can use the &lt;code&gt;FreeT&lt;/code&gt; type from &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/free/docs/Control-Monad-Trans-Free.html&#34;&gt;Control.Monad.Trans.Free&lt;/a&gt;&lt;/em&gt;, and now we have our pipe interface, with a &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;MonadTrans&lt;/code&gt; instance!&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This takes our base functor and imbues it with a full &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;MonadTrans&lt;/code&gt; instance:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lift ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o) m a&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lift ::&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o) m a&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;)  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;gt;&amp;gt;=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s the essence of the free structure: it &lt;em&gt;adds&lt;/em&gt; to our base functor (&lt;code&gt;PipeF&lt;/code&gt;) exactly the structure it needs to be able to implement the instances it is free on. And it’s all free as in beer! :D&lt;/p&gt;
&lt;p&gt;As a bonus gift, we also get a &lt;code&gt;MonadIO&lt;/code&gt; instance from &lt;code&gt;FreeT&lt;/code&gt;, as well:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;liftIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o) m a&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;liftIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we just need our functions to lift our primitives to &lt;code&gt;Pipe&lt;/code&gt;, using &lt;code&gt;liftF :: f a -&amp;gt; FreeT f m a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L29-L33&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;yield ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; o &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m ()&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;yield x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftF &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;YieldF&lt;/span&gt; x ()&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;await ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; i)&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;await &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftF &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AwaitF&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(these things you can usually just fill in using type tetris, filling in values with typed holes into they typecheck).&lt;/p&gt;
&lt;p&gt;Note that all of the individual pipes we had planned work as-is! And we can even even make &lt;code&gt;sourceHandle&lt;/code&gt; and &lt;code&gt;sinkStdout&lt;/code&gt; work for any &lt;code&gt;MonadIO m =&amp;gt; Pipe i o m a&lt;/code&gt;, because of the unexpected surprise Christmas gift we got (the &lt;code&gt;MonadIO&lt;/code&gt; instance and &lt;code&gt;liftIO :: MonadIO m =&amp;gt; IO a -&amp;gt; Pipe i o u m a&lt;/code&gt;). Remember, &lt;code&gt;MonadIO m&lt;/code&gt; is basically any &lt;code&gt;m&lt;/code&gt; that supports doing IO.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L74-L119&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sourceHandle ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handle&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;sourceHandle handle &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;    res &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; tryJust (guard &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; isEOFError) (hGetLine handle)&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; res &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt;  _   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; out &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;        yield out&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;        sourceHandle handle&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sinkStdout ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; o m ()&lt;/span&gt;
&lt;span id=&#34;cb16-13&#34;&gt;&lt;a href=&#34;#cb16-13&#34;&gt;&lt;/a&gt;sinkStdout &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-14&#34;&gt;&lt;a href=&#34;#cb16-14&#34;&gt;&lt;/a&gt;    inp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; await&lt;/span&gt;
&lt;span id=&#34;cb16-15&#34;&gt;&lt;a href=&#34;#cb16-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-16&#34;&gt;&lt;a href=&#34;#cb16-16&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb16-17&#34;&gt;&lt;a href=&#34;#cb16-17&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-18&#34;&gt;&lt;a href=&#34;#cb16-18&#34;&gt;&lt;/a&gt;        liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb16-19&#34;&gt;&lt;a href=&#34;#cb16-19&#34;&gt;&lt;/a&gt;        sinkStdout&lt;/span&gt;
&lt;span id=&#34;cb16-20&#34;&gt;&lt;a href=&#34;#cb16-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-21&#34;&gt;&lt;a href=&#34;#cb16-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toUpperPipe ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb16-22&#34;&gt;&lt;a href=&#34;#cb16-22&#34;&gt;&lt;/a&gt;toUpperPipe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-23&#34;&gt;&lt;a href=&#34;#cb16-23&#34;&gt;&lt;/a&gt;    inp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; await&lt;/span&gt;
&lt;span id=&#34;cb16-24&#34;&gt;&lt;a href=&#34;#cb16-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-25&#34;&gt;&lt;a href=&#34;#cb16-25&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb16-26&#34;&gt;&lt;a href=&#34;#cb16-26&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-27&#34;&gt;&lt;a href=&#34;#cb16-27&#34;&gt;&lt;/a&gt;        yield (&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toUpper&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&#34;cb16-28&#34;&gt;&lt;a href=&#34;#cb16-28&#34;&gt;&lt;/a&gt;        toUpperPipe&lt;/span&gt;
&lt;span id=&#34;cb16-29&#34;&gt;&lt;a href=&#34;#cb16-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-30&#34;&gt;&lt;a href=&#34;#cb16-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;untilSTOP ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb16-31&#34;&gt;&lt;a href=&#34;#cb16-31&#34;&gt;&lt;/a&gt;untilSTOP &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-32&#34;&gt;&lt;a href=&#34;#cb16-32&#34;&gt;&lt;/a&gt;    inp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; await&lt;/span&gt;
&lt;span id=&#34;cb16-33&#34;&gt;&lt;a href=&#34;#cb16-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-34&#34;&gt;&lt;a href=&#34;#cb16-34&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb16-35&#34;&gt;&lt;a href=&#34;#cb16-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb16-36&#34;&gt;&lt;a href=&#34;#cb16-36&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;STOP&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb16-37&#34;&gt;&lt;a href=&#34;#cb16-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-38&#34;&gt;&lt;a href=&#34;#cb16-38&#34;&gt;&lt;/a&gt;            yield x&lt;/span&gt;
&lt;span id=&#34;cb16-39&#34;&gt;&lt;a href=&#34;#cb16-39&#34;&gt;&lt;/a&gt;            untilSTOP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s because using &lt;code&gt;FreeT&lt;/code&gt;, we imbue the structure required to do monadic chaining (do notation) and MonadTrans (&lt;code&gt;lift&lt;/code&gt;) and MonadIO (&lt;code&gt;liftIO&lt;/code&gt;) for free!&lt;/p&gt;
&lt;p&gt;To “run” our pipes, we can use &lt;code&gt;FreeT&lt;/code&gt;’s “interpreter” function. This follows the same pattern as for many free structures: specify how to handle each individual base functor constructor, and it then gives you a handler to handle the entire thing.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;iterT&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o (m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a)  &lt;span class=&#34;co&#34;&gt;-- ^ given a way to handle each base functor constructor ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a       &lt;span class=&#34;co&#34;&gt;-- ^ here&amp;#39;s a way to handle the whole thing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So let’s write our base functor handler. Remember that we established earlier we can only “run” a &lt;code&gt;Pipe () Void m a&lt;/code&gt;: that is, pipes where &lt;code&gt;await&lt;/code&gt; can always be fed with no information (&lt;code&gt;()&lt;/code&gt;) and no &lt;code&gt;yield&lt;/code&gt; is ever called (because you cannot yield with &lt;code&gt;Void&lt;/code&gt;, a type with no inhabitants). We can directly translate this to how we handle each constructor:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L57-L60&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-2&#34;&gt;&lt;a href=&#34;#cb18-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-3&#34;&gt;&lt;a href=&#34;#cb18-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;handlePipeF ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; (m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb18-4&#34;&gt;&lt;a href=&#34;#cb18-4&#34;&gt;&lt;/a&gt;handlePipeF &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-5&#34;&gt;&lt;a href=&#34;#cb18-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;YieldF&lt;/span&gt; o _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; absurd o&lt;/span&gt;
&lt;span id=&#34;cb18-6&#34;&gt;&lt;a href=&#34;#cb18-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;AwaitF&lt;/span&gt; f   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; ())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so we get our full &lt;code&gt;runPipe&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L62-L63&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-2&#34;&gt;&lt;a href=&#34;#cb19-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-3&#34;&gt;&lt;a href=&#34;#cb19-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runPipe ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb19-4&#34;&gt;&lt;a href=&#34;#cb19-4&#34;&gt;&lt;/a&gt;runPipe &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; iterT handlePipeF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think this process exemplifies most of the major beats when working with free structures:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Define the base functor&lt;/li&gt;
&lt;li&gt;Allow the free structure to imbue the proper structure over your base functor&lt;/li&gt;
&lt;li&gt;Write your interpreter to interpret the constructors of your base functor, and the free structure will give you a way to interpret the entire structure.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-final-ornament&#34;&gt;The Final Ornament&lt;/h3&gt;
&lt;p&gt;If you look at the list of all the things we wanted, we’re still missing one thing: pipe composition/input-output chaining. That’s because it isn’t a primitive operation (like yield or await), and it wasn’t given to us for free by our free structure (&lt;code&gt;FreeT&lt;/code&gt;, which gave us monadic composition and monad transformer ability). So with how we have currently written it, there isn’t any way of getting around writing &lt;code&gt;(.|)&lt;/code&gt; manually. So let’s roll up our sleeves and do the (admittedly minimal amount of) dirty work.&lt;/p&gt;
&lt;p&gt;Let’s think about the semantics of our pipe chaining. We want to never do more work than we need to do, so we’ll be “pull-based”: for &lt;code&gt;f .| g&lt;/code&gt;, try running &lt;code&gt;g&lt;/code&gt; as much as possible until it awaits anything from &lt;code&gt;f&lt;/code&gt;. Only then do we try doing &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To implement this, we’re going to have to dig in a little bit to the implementation/structure of &lt;code&gt;FreeT&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb20-1&#34;&gt;&lt;a href=&#34;#cb20-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; f m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-2&#34;&gt;&lt;a href=&#34;#cb20-2&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; runFreeT ::&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;FreeF&lt;/span&gt; f a (&lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; f m a)) }&lt;/span&gt;
&lt;span id=&#34;cb20-3&#34;&gt;&lt;a href=&#34;#cb20-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-4&#34;&gt;&lt;a href=&#34;#cb20-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeF&lt;/span&gt; f a b&lt;/span&gt;
&lt;span id=&#34;cb20-5&#34;&gt;&lt;a href=&#34;#cb20-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Pure&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb20-6&#34;&gt;&lt;a href=&#34;#cb20-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Free&lt;/span&gt; (f b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does look a little complicated, and on the face of it, it can be a bit intimidating. And why is there a second internal data type?&lt;/p&gt;
&lt;p&gt;Well, you can think of &lt;code&gt;FreeF f a b&lt;/code&gt; as being a fancy version of &lt;code&gt;Either a (f b)&lt;/code&gt;. And the implementation of &lt;code&gt;FreeT&lt;/code&gt; is saying that &lt;code&gt;FreeT f m a&lt;/code&gt; is &lt;em&gt;an m-action&lt;/em&gt; that produces &lt;code&gt;Either a (FreeT f m a)&lt;/code&gt;. So for example, &lt;code&gt;FreeT f IO a&lt;/code&gt; is an IO action that produces &lt;em&gt;either&lt;/em&gt; the &lt;code&gt;a&lt;/code&gt; (we’re done, end here!) or a &lt;code&gt;f (FreeT f m a))&lt;/code&gt; (we have to handle an &lt;code&gt;f&lt;/code&gt; here!)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; f m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; runFreeT ::&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; a (f (&lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; f m a))) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the top level, &lt;code&gt;FreeT&lt;/code&gt; is an action in the underlying monad (just like &lt;code&gt;MaybeT&lt;/code&gt;, &lt;code&gt;ExceptT&lt;/code&gt;, &lt;code&gt;StateT&lt;/code&gt;, etc.). Let’s take that into account and write our implementation (with a hefty bit of help from the typechecker and typed holes)! Remember our plan: for &lt;code&gt;f .| g&lt;/code&gt;, &lt;em&gt;start unrolling &lt;code&gt;g&lt;/code&gt;&lt;/em&gt; until it needs anything, and then ask &lt;code&gt;f&lt;/code&gt; when it does.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34;&gt;&lt;/a&gt;(&lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; a b m x         &lt;span class=&#34;co&#34;&gt;-- ^ pipe from a -&amp;gt; b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; b c m y         &lt;span class=&#34;co&#34;&gt;-- ^ pipe from b -&amp;gt; c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; a c m y         &lt;span class=&#34;co&#34;&gt;-- ^ pipe from a -&amp;gt; c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34;&gt;&lt;/a&gt;pf &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; pg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34;&gt;&lt;/a&gt;    gRes &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; runFreeT pg          &lt;span class=&#34;co&#34;&gt;-- 1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; gRes &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Pure&lt;/span&gt; x            &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; x       &lt;span class=&#34;co&#34;&gt;-- 2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Free&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;YieldF&lt;/span&gt; o x) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- 3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34;&gt;&lt;/a&gt;        yield o&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34;&gt;&lt;/a&gt;        pf &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Free&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;AwaitF&lt;/span&gt; g  ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- 4&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34;&gt;&lt;/a&gt;        fRes &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; runFreeT pf&lt;/span&gt;
&lt;span id=&#34;cb22-15&#34;&gt;&lt;a href=&#34;#cb22-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; fRes &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-16&#34;&gt;&lt;a href=&#34;#cb22-16&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dt&#34;&gt;Pure&lt;/span&gt; _            &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; g &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- 5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-17&#34;&gt;&lt;a href=&#34;#cb22-17&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dt&#34;&gt;Free&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;YieldF&lt;/span&gt; o y) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; y       &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; g (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; o)    &lt;span class=&#34;co&#34;&gt;-- 6&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-18&#34;&gt;&lt;a href=&#34;#cb22-18&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dt&#34;&gt;Free&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;AwaitF&lt;/span&gt; f  ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;                       &lt;span class=&#34;co&#34;&gt;-- 7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-19&#34;&gt;&lt;a href=&#34;#cb22-19&#34;&gt;&lt;/a&gt;            i &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; await&lt;/span&gt;
&lt;span id=&#34;cb22-20&#34;&gt;&lt;a href=&#34;#cb22-20&#34;&gt;&lt;/a&gt;            f i &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; gRes)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are some numbered notes and comments:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Start unrolling the downstream pipe &lt;code&gt;pg&lt;/code&gt;, in the underlying monad &lt;code&gt;m&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;pg&lt;/code&gt; produced &lt;code&gt;Pure x&lt;/code&gt;, it means we’re done pulling anything. The entire pipe has terminated, since we will never need anything again. So just quit out with &lt;code&gt;pure x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;pg&lt;/code&gt; produced &lt;code&gt;Free (YieldF o x)&lt;/code&gt;, it means it’s yielding an &lt;code&gt;o&lt;/code&gt; and continuing on with &lt;code&gt;x&lt;/code&gt;. So let’s just yield that &lt;code&gt;o&lt;/code&gt; and move on to the composition of &lt;code&gt;pf&lt;/code&gt; with the next pipe &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;pg&lt;/code&gt; produced &lt;code&gt;Free (AwaitF g)&lt;/code&gt;, now things get interesting. We need to unroll &lt;code&gt;pf&lt;/code&gt; until it yields some &lt;code&gt;Maybe b&lt;/code&gt;, and feed that to &lt;code&gt;g :: Maybe b -&amp;gt; Pipe b c m y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;pf&lt;/code&gt; produced &lt;code&gt;Pure y&lt;/code&gt;, that means it was done! The upstream terminated, so the downstream will have to terminate as well. So &lt;code&gt;g&lt;/code&gt; gets a &lt;code&gt;Nothing&lt;/code&gt;, and we move from there. Note we have to compose with a dummy pipe &lt;code&gt;pure ()&lt;/code&gt; to make the types match up properly.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;pf&lt;/code&gt; produced &lt;code&gt;YieldF o y&lt;/code&gt;, then we have found our match! So give &lt;code&gt;g (Just o)&lt;/code&gt;, and now we recursively compose the next pipe (&lt;code&gt;y&lt;/code&gt;) with the that &lt;code&gt;g&lt;/code&gt; gave us.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;pf&lt;/code&gt; produced &lt;code&gt;AwaitF f&lt;/code&gt;, then we’re in a bind, aren’t we? We now have two layers waiting for something further upstream. So, we await from &lt;em&gt;even further&lt;/em&gt; upstream; when we get it, we feed it to &lt;code&gt;f&lt;/code&gt; and then compose &lt;code&gt;f i :: Pipe a b m x&lt;/code&gt; with &lt;code&gt;pg&lt;/code&gt;’s result (wrapping up &lt;code&gt;gRes&lt;/code&gt; back into a &lt;code&gt;FreeT&lt;/code&gt;/&lt;code&gt;Pipe&lt;/code&gt; so the types match up).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Admittedly (!) this is the “ugly” part of this derivation: sometimes we just can’t get everything for free. But getting the Monad, Applicative, Functor, MonadTrans, etc. instances is probably nice enough to justify this inconvenience :) And who knows, there might be a free structure that I don’t know about that gives us all of these &lt;em&gt;plus&lt;/em&gt; piping for free.&lt;/p&gt;
&lt;h3 id=&#34;christmas-miracle&#34;&gt;Christmas Miracle&lt;/h3&gt;
&lt;p&gt;It runs!&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb23-1&#34;&gt;&lt;a href=&#34;#cb23-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L128-L133&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-2&#34;&gt;&lt;a href=&#34;#cb23-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-3&#34;&gt;&lt;a href=&#34;#cb23-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;samplePipe ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Handle&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb23-4&#34;&gt;&lt;a href=&#34;#cb23-4&#34;&gt;&lt;/a&gt;samplePipe handle &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-5&#34;&gt;&lt;a href=&#34;#cb23-5&#34;&gt;&lt;/a&gt;       sourceHandle handle&lt;/span&gt;
&lt;span id=&#34;cb23-6&#34;&gt;&lt;a href=&#34;#cb23-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; untilSTOP&lt;/span&gt;
&lt;span id=&#34;cb23-7&#34;&gt;&lt;a href=&#34;#cb23-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; toUpperPipe&lt;/span&gt;
&lt;span id=&#34;cb23-8&#34;&gt;&lt;a href=&#34;#cb23-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; sinkStdout&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;$ cat testpipefile.txt
hello
world
STOP
okay
goodbye&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb25-1&#34;&gt;&lt;a href=&#34;#cb25-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; withFile &lt;span class=&#34;st&#34;&gt;&amp;quot;testpipefile.txt&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReadMode&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \handle &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-2&#34;&gt;&lt;a href=&#34;#cb25-2&#34;&gt;&lt;/a&gt;        runPipe (samplePipe handle)&lt;/span&gt;
&lt;span id=&#34;cb25-3&#34;&gt;&lt;a href=&#34;#cb25-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- HELLO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-4&#34;&gt;&lt;a href=&#34;#cb25-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- WORLD&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Smooth as silk :D&lt;/p&gt;
&lt;h2 id=&#34;takeways-for-a-happy-new-year&#34;&gt;Takeways for a Happy New Year&lt;/h2&gt;
&lt;p&gt;Most of this post was thought up when I needed&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; a tool that was &lt;em&gt;sort of&lt;/em&gt; like conduit, &lt;em&gt;sort of&lt;/em&gt; like pipes, &lt;em&gt;sort of&lt;/em&gt; like the other libraries…and I thought I had to read up on the theory of pipes and iteratees and trampolines and fancy pants math stuff to be able to make anything useful in this space. I remember being very discouraged when I read about this stuff as a wee new Haskeller, because the techniques seemed so foreign and out of the range of my normal Haskell experience.&lt;/p&gt;
&lt;p&gt;However, I found a way to maintain a level head somehow, and just thought — “ok, I just need a monad (trans) with two primitive actions: await, and yield. Why don’t I just make an await and yield and get automatic &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;MonadTrans&lt;/code&gt; instances with the appropriate free structure?”&lt;/p&gt;
&lt;p&gt;As we can see…this works just fine! We only needed to implement one extra thing (&lt;code&gt;.|&lt;/code&gt;) to get the interface of our dreams. Of course, for a real industrial-strength streaming combinator library, we might need to be a bit more careful. But for my learning experience and use case, it worked perfectly.&lt;/p&gt;
&lt;p&gt;The next time you need to make some monad that might seem exotic, try this out and see if it works for you :)&lt;/p&gt;
&lt;p&gt;Happy holidays, and merry Christmas!&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;p&gt;Click on the links in the corner of the text boxes for solutions! (or just check out &lt;a href=&#34;https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs&#34;&gt;the source file&lt;/a&gt;)&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;An &lt;code&gt;Pipe i o m a&lt;/code&gt; “takes” &lt;code&gt;i&lt;/code&gt; and “produces” &lt;code&gt;o&lt;/code&gt;, so it should make sense to make pre-map and post-map functions:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb26-1&#34;&gt;&lt;a href=&#34;#cb26-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L148-L151&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-2&#34;&gt;&lt;a href=&#34;#cb26-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-3&#34;&gt;&lt;a href=&#34;#cb26-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;postMap ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (o &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; o&amp;#39;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o&amp;#39; m a&lt;/span&gt;
&lt;span id=&#34;cb26-4&#34;&gt;&lt;a href=&#34;#cb26-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-5&#34;&gt;&lt;a href=&#34;#cb26-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;preMap ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (i&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i&amp;#39; o m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That pre-maps all inputs the pipe would receive, and post-maps all of the values it yields.&lt;/p&gt;
&lt;p&gt;Hint: This actually is made a lot simpler to write with the handy &lt;code&gt;transFreeT&lt;/code&gt; combinator, which lets you swap out/change the base functor:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb27&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb27-1&#34;&gt;&lt;a href=&#34;#cb27-1&#34;&gt;&lt;/a&gt;transFreeT&lt;/span&gt;
&lt;span id=&#34;cb27-2&#34;&gt;&lt;a href=&#34;#cb27-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g a)     &lt;span class=&#34;co&#34;&gt;-- ^ polymorphic function to edit the base functor&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-3&#34;&gt;&lt;a href=&#34;#cb27-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; f m b&lt;/span&gt;
&lt;span id=&#34;cb27-4&#34;&gt;&lt;a href=&#34;#cb27-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; g m b&lt;/span&gt;
&lt;span id=&#34;cb27-5&#34;&gt;&lt;a href=&#34;#cb27-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-6&#34;&gt;&lt;a href=&#34;#cb27-6&#34;&gt;&lt;/a&gt;transFreeT&lt;/span&gt;
&lt;span id=&#34;cb27-7&#34;&gt;&lt;a href=&#34;#cb27-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i&amp;#39; o&amp;#39; a)  &lt;span class=&#34;co&#34;&gt;-- ^ polymorphic function to edit the base functor&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb27-8&#34;&gt;&lt;a href=&#34;#cb27-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i  o  m a&lt;/span&gt;
&lt;span id=&#34;cb27-9&#34;&gt;&lt;a href=&#34;#cb27-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i&amp;#39; o&amp;#39; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could then write pre-map and post-map function on &lt;code&gt;PipeF&lt;/code&gt; and translate them to &lt;code&gt;Pipe&lt;/code&gt; using &lt;code&gt;transFreeT&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb28-1&#34;&gt;&lt;a href=&#34;#cb28-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L140-L152&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-2&#34;&gt;&lt;a href=&#34;#cb28-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-3&#34;&gt;&lt;a href=&#34;#cb28-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;postMapF ::&lt;/span&gt; (o &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; o&amp;#39;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o&amp;#39; a&lt;/span&gt;
&lt;span id=&#34;cb28-4&#34;&gt;&lt;a href=&#34;#cb28-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-5&#34;&gt;&lt;a href=&#34;#cb28-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;preMapF ::&lt;/span&gt; (i&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i&amp;#39; o a&lt;/span&gt;
&lt;span id=&#34;cb28-6&#34;&gt;&lt;a href=&#34;#cb28-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-7&#34;&gt;&lt;a href=&#34;#cb28-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;postMap ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (o &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; o&amp;#39;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o&amp;#39; m a&lt;/span&gt;
&lt;span id=&#34;cb28-8&#34;&gt;&lt;a href=&#34;#cb28-8&#34;&gt;&lt;/a&gt;postMap f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; transFreeT (postMapF f)&lt;/span&gt;
&lt;span id=&#34;cb28-9&#34;&gt;&lt;a href=&#34;#cb28-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-10&#34;&gt;&lt;a href=&#34;#cb28-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;preMap ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (i&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i&amp;#39; o m a&lt;/span&gt;
&lt;span id=&#34;cb28-11&#34;&gt;&lt;a href=&#34;#cb28-11&#34;&gt;&lt;/a&gt;preMap f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; transFreeT (preMapF f)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One staple of a streaming combinator system is giving you a disciplined way to handle resources allocations like file handlers and properly close them on completion. Our streaming combinator system has no inherent way of doing this within its structure, but we can take advantage of the &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/resourcet&#34;&gt;resourcet&lt;/a&gt;&lt;/em&gt; package to handle it for us.&lt;/p&gt;
&lt;p&gt;Basically, if we run our pipes over &lt;code&gt;ResourceT IO&lt;/code&gt; instead of normal &lt;code&gt;IO&lt;/code&gt;, we get an extra action &lt;code&gt;allocate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb29-1&#34;&gt;&lt;a href=&#34;#cb29-1&#34;&gt;&lt;/a&gt;allocate&lt;/span&gt;
&lt;span id=&#34;cb29-2&#34;&gt;&lt;a href=&#34;#cb29-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; a             &lt;span class=&#34;co&#34;&gt;-- ^ get a handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-3&#34;&gt;&lt;a href=&#34;#cb29-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ())     &lt;span class=&#34;co&#34;&gt;-- ^ close a handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-4&#34;&gt;&lt;a href=&#34;#cb29-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ResourceT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ResourceKey&lt;/span&gt;, a)&lt;/span&gt;
&lt;span id=&#34;cb29-5&#34;&gt;&lt;a href=&#34;#cb29-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-6&#34;&gt;&lt;a href=&#34;#cb29-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- example&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-7&#34;&gt;&lt;a href=&#34;#cb29-7&#34;&gt;&lt;/a&gt;allocate (openFile fp &lt;span class=&#34;dt&#34;&gt;ReadMode&lt;/span&gt;) hClose&lt;/span&gt;
&lt;span id=&#34;cb29-8&#34;&gt;&lt;a href=&#34;#cb29-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ResourceT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ResourceKey&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Handler&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can use this in our pipe to open a handler from a filename, and rest assured that the file handler will be closed when we eventually &lt;code&gt;runResourceT :: ResourceT IO a -&amp;gt; IO a&lt;/code&gt; our pipe.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb30&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb30-1&#34;&gt;&lt;a href=&#34;#cb30-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L155-L165&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb30-2&#34;&gt;&lt;a href=&#34;#cb30-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb30-3&#34;&gt;&lt;a href=&#34;#cb30-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sourceFile ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ResourceT&lt;/span&gt; m) ()&lt;/span&gt;
&lt;span id=&#34;cb30-4&#34;&gt;&lt;a href=&#34;#cb30-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb30-5&#34;&gt;&lt;a href=&#34;#cb30-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;samplePipe2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o (&lt;span class=&#34;dt&#34;&gt;ResourceT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt;) ()&lt;/span&gt;
&lt;span id=&#34;cb30-6&#34;&gt;&lt;a href=&#34;#cb30-6&#34;&gt;&lt;/a&gt;samplePipe2 fp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb30-7&#34;&gt;&lt;a href=&#34;#cb30-7&#34;&gt;&lt;/a&gt;       sourceFile fp&lt;/span&gt;
&lt;span id=&#34;cb30-8&#34;&gt;&lt;a href=&#34;#cb30-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; untilSTOP&lt;/span&gt;
&lt;span id=&#34;cb30-9&#34;&gt;&lt;a href=&#34;#cb30-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; toUpperPipe&lt;/span&gt;
&lt;span id=&#34;cb30-10&#34;&gt;&lt;a href=&#34;#cb30-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.|&lt;/span&gt; hoistFreeT lift sinkStdout&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb31-1&#34;&gt;&lt;a href=&#34;#cb31-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; runResourceT &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; runPipe &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; samplePipe2 &lt;span class=&#34;st&#34;&gt;&amp;quot;testpipefile.txt&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-2&#34;&gt;&lt;a href=&#34;#cb31-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- HELLO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-3&#34;&gt;&lt;a href=&#34;#cb31-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- WORLD&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let’s say we modified our &lt;code&gt;PipeF&lt;/code&gt; slightly to take another parameter &lt;code&gt;u&lt;/code&gt;, the result type of the upstream pipe.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb32-1&#34;&gt;&lt;a href=&#34;#cb32-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o u a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb32-2&#34;&gt;&lt;a href=&#34;#cb32-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;YieldF&lt;/span&gt; o a&lt;/span&gt;
&lt;span id=&#34;cb32-3&#34;&gt;&lt;a href=&#34;#cb32-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AwaitF&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; u i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb32-4&#34;&gt;&lt;a href=&#34;#cb32-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb32-5&#34;&gt;&lt;a href=&#34;#cb32-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o u &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FreeT&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;PipeF&lt;/span&gt; i o u)&lt;/span&gt;
&lt;span id=&#34;cb32-6&#34;&gt;&lt;a href=&#34;#cb32-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb32-7&#34;&gt;&lt;a href=&#34;#cb32-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;await ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; u i)&lt;/span&gt;
&lt;span id=&#34;cb32-8&#34;&gt;&lt;a href=&#34;#cb32-8&#34;&gt;&lt;/a&gt;await &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftF &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AwaitF&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now &lt;code&gt;await&lt;/code&gt; would be fed &lt;code&gt;i&lt;/code&gt; things yielded from upstream, but sometimes you’d get a &lt;code&gt;Left&lt;/code&gt; indicating that the upstream pipe has terminated.&lt;/p&gt;
&lt;p&gt;What would be the implications if &lt;code&gt;u&lt;/code&gt; is &lt;code&gt;Void&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb33-1&#34;&gt;&lt;a href=&#34;#cb33-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CertainPipe&lt;/span&gt; i o &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What could you do in a &lt;code&gt;CertainPipe i o m a&lt;/code&gt; that you couldn’t normally do with our &lt;code&gt;Pipe i o m a&lt;/code&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We mentioned earlier that a “source” could have type&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb34-1&#34;&gt;&lt;a href=&#34;#cb34-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a &lt;code&gt;Source o m a&lt;/code&gt; would be something that keeps on pumping out &lt;code&gt;o&lt;/code&gt;s as much as we need, without requiring any upstream input.&lt;/p&gt;
&lt;p&gt;This is actually the essential behavior of the (true) list monad transformer, as esposed by the &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/list-transformer&#34;&gt;list-transformer&lt;/a&gt;&lt;/em&gt; package.&lt;/p&gt;
&lt;p&gt;In that package, &lt;code&gt;ListT&lt;/code&gt; is defined as:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb35-1&#34;&gt;&lt;a href=&#34;#cb35-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ListT&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ListT&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; next ::&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Step&lt;/span&gt; m a) }&lt;/span&gt;
&lt;span id=&#34;cb35-2&#34;&gt;&lt;a href=&#34;#cb35-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-3&#34;&gt;&lt;a href=&#34;#cb35-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Step&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cons&lt;/span&gt; a (&lt;span class=&#34;dt&#34;&gt;ListT&lt;/span&gt; m a) &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it’s a type that can yield out new &lt;code&gt;a&lt;/code&gt;s on-demand, until exhausted.&lt;/p&gt;
&lt;p&gt;In fact, &lt;code&gt;Source o m ()&lt;/code&gt; is equivalent to &lt;code&gt;ListT m o&lt;/code&gt;. Write the functions to convert between them! :D&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb36-1&#34;&gt;&lt;a href=&#34;#cb36-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/streaming-combinators-free.hs#L171-L179&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-2&#34;&gt;&lt;a href=&#34;#cb36-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-3&#34;&gt;&lt;a href=&#34;#cb36-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toListT ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; () o m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L.ListT&lt;/span&gt; m o&lt;/span&gt;
&lt;span id=&#34;cb36-4&#34;&gt;&lt;a href=&#34;#cb36-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-5&#34;&gt;&lt;a href=&#34;#cb36-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fromListT ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L.ListT&lt;/span&gt; m o &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pipe&lt;/span&gt; i o m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately we cannot use &lt;code&gt;iterT&lt;/code&gt; because the last type parameter of each is different. But manual pattern matching (like how we wrote &lt;code&gt;(.|)&lt;/code&gt;) isn’t too bad!&lt;/p&gt;
&lt;p&gt;The semantics of &lt;code&gt;ListT&lt;/code&gt; api is that &lt;code&gt;x &amp;lt;|&amp;gt; y&lt;/code&gt; will “do” (and emit the result) &lt;code&gt;x&lt;/code&gt; before moving on to what &lt;code&gt;y&lt;/code&gt; would emit. And &lt;code&gt;empty&lt;/code&gt; is the &lt;code&gt;ListT&lt;/code&gt; that signals it is done producing. &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; and &lt;code&gt;empty&lt;/code&gt; for &lt;code&gt;ListT&lt;/code&gt; are roughly analogous to &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; for &lt;code&gt;Source&lt;/code&gt;, respectively.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;special-thanks&#34;&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;I am very humbled to be supported by an amazing community, who make it possible for me to devote time to researching and writing these posts. Very special thanks to my supporter at the “Amazing” level on &lt;a href=&#34;https://www.patreon.com/justinle/overview&#34;&gt;patreon&lt;/a&gt;, Josh Vera! :)&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;“Universally quantified” here means that the pipe’s type is left fully polymorphic (with no constraints) over &lt;code&gt;i&lt;/code&gt;, the input.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;This came about when I was developing my numerical &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/emd&#34;&gt;emd&lt;/a&gt;&lt;/em&gt; library.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/holly-jolly-streaming-combinators.html</guid><pubDate>Sun, 13 Dec 2020 00:00:00 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2020-12-13</date></item><item><title>Shuffling things up: Applying Group Theory in Advent of Code</title><link>https://blog.jle.im/entry/shuffling-things-up.html</link><description>&lt;p&gt;So it’s November, and &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; season is in the air! It’s time for everyone’s favorite Santa-based light hearted learn-to-program-or-a-new-language holiday season programming challenge series. Every year a bunch of us gather around the fireplace, roast chestnuts, and brainstorm all of the interesting ways we can solve these cute themed puzzles every day. These puzzles are designed to accessible enough for most new programmers, but deep enough to provide entertainment for experienced ones. I’ve &lt;a href=&#34;https://blog.jle.im/entries/tagged/advent-of-code.html&#34;&gt;written many blog posts&lt;/a&gt; on some of the interesting insight some of the puzzles have yielded, and I also &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md&#34;&gt;post my reflections on as many puzzles I can&lt;/a&gt; while solving them in Haskell. And if you’re solving things in Haskell, I also published an &lt;a href=&#34;https://hackage.haskell.org/package/advent-of-code-api&#34;&gt;open-sourced rate-limited API library&lt;/a&gt; so you can fetch and submit answers from the comfort of your command line.&lt;/p&gt;
&lt;p&gt;To kick off the season, I’ve decided to write about one of my favorite puzzles from Advent of Code 2019 – &lt;a href=&#34;https://adventofcode.com/2019/day/22&#34;&gt;Day 22: Slam Shuffle&lt;/a&gt;. To me, it stands out because it’s a perfect example of how Haskell’s approach to mathematical abstraction nudges you into the direction of an efficient solution — in a way that other languages would obscure or make less obvious.&lt;/p&gt;
&lt;p&gt;So, let’s dive in! In the end, hopefully this post can get you excited for this wonderful season, and maybe also shed some insight into what it means when we say that Haskell can help you leverage math to find good solutions to your real problems.&lt;/p&gt;
&lt;p&gt;Of course, this post has spoilers for Advent of Code 2019 Day 22, if you are planning on trying to figure it out from yourself. If you haven’t tried it, I recommend you give it a shot and come back after! :D&lt;/p&gt;
&lt;h2 id=&#34;slam-shuffle&#34;&gt;Slam Shuffle&lt;/h2&gt;
&lt;p&gt;If you haven’t already, take some time to &lt;a href=&#34;https://adventofcode.com/2019/day/22&#34;&gt;read through the problem statement&lt;/a&gt;. The basic idea is that we are given a series of operations to “shuffle” a deck of 10007 cards, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deal with increment 7
deal into new stack
deal into new stack
... etc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After performing all of the many operations, the question then asks about the card at a given position (the 2019th card in the deck).&lt;/p&gt;
&lt;p&gt;Part 2, which you might not be able to see if you haven’t submitted an answer yet for Part 1, involves the same process with a deck of 119315717514047 cards, and repeating the entire shuffling sequence 101741582076661 times. It then asks you to find the card that ends up at index 2020.&lt;/p&gt;
&lt;p&gt;In this problem, it seems we have a list of “shuffles” that we want to run on a deck of cards. However, let’s think about this in a more data-driven approach: instead of thinking about successive shufflings of cards, let’s imagine the specification of a “shuffle” itself as our main data, and how we can combine shuffle operations together into new shuffle operations.&lt;/p&gt;
&lt;p&gt;We are looking for “take shuffle A and shuffle B, and return a new shuffle that represents doing B, then A”. This is “shuffle composition”, or “permutation composition” (&lt;a href=&#34;https://en.wikipedia.org/wiki/Permutation&#34;&gt;permutation&lt;/a&gt; being the mathematical word for “shuffling” here, basically)&lt;/p&gt;
&lt;p&gt;Since we’ve identified that we want to begin implementing a way of composing/combining permutations together, we can do a bit of reading to learn that one of the most famous properties of permutation composition is that they form a “group”, which means they can be composed (associatively), have an identity, and can be inverted. This means that if you have two permutations, you can “squish” them to create a new permutation, and work with that &lt;em&gt;new&lt;/em&gt; permutation.&lt;/p&gt;
&lt;p&gt;I’ve talked about &lt;a href=&#34;https://blog.jle.im/entry/alchemical-groups.html&#34;&gt;using group theory&lt;/a&gt; principles before in this blog to help guide us towards solutions and optimizations — the main principle is that if we express our program in terms of group operations, then we can take advantage of the large body of knowledge built up over centuries to understand, analyze, and potentially optimize our program.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;first&lt;/em&gt; big advantage in this situation is that we can treat our transformations &lt;em&gt;as data&lt;/em&gt;, and not as functions. And that if we have two transformations, we can always create a new one (just a normal data type value) that represents the composition of the two original ones.&lt;/p&gt;
&lt;h2 id=&#34;now-youre-thinking-with-groups&#34;&gt;Now You’re Thinking With Groups&lt;/h2&gt;
&lt;p&gt;Knowing permutations are a group, it means that once we settle on our representation of them, &lt;code&gt;Perm&lt;/code&gt;, we can write an instance of &lt;code&gt;Perm&lt;/code&gt; for &lt;code&gt;Semigroup&lt;/code&gt;, &lt;code&gt;Monoid&lt;/code&gt;, and &lt;code&gt;Group&lt;/code&gt;, abstractions in Haskell that many types are already instances of. Abstractions like &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; are pretty much an everyday thing in Haskell, so this fits in quite nicely. &lt;code&gt;Group&lt;/code&gt; comes from the &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/groups&#34;&gt;groups&lt;/a&gt;&lt;/em&gt; package, which also provides some nice applications of group theory.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- let&amp;#39;s figure out the implementation later, where n is the number of cards&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Haskell, we express things like “&lt;code&gt;Perm&lt;/code&gt; is a Semigroup/Monoid/Group” by saying that they are instances of &lt;em&gt;typeclasses&lt;/em&gt;, which (for this purpose) are like interfaces in languages like Java.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | An instance m can be &amp;quot;combined&amp;quot; using `x &amp;lt;&amp;gt; y`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    (&amp;lt;&amp;gt;) ::&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | There is always an identity element for &amp;lt;&amp;gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- x &amp;lt;&amp;gt; mempty == x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- mempty &amp;lt;&amp;gt; x == x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    mempty ::&lt;/span&gt; m&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Every m has an inverse:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- x &amp;lt;&amp;gt; invert x == mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- invert x &amp;lt;&amp;gt; x == mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Group&lt;/span&gt; m &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    invert ::&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that if &lt;code&gt;Perm&lt;/code&gt; is an instance of &lt;code&gt;Group&lt;/code&gt; (which has superclasses &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt;), we can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compose permutations using &lt;code&gt;x &amp;lt;&amp;gt; y&lt;/code&gt;, which means “shuffle with strategy &lt;code&gt;y&lt;/code&gt;, then with strategy &lt;code&gt;x&lt;/code&gt;”&lt;/li&gt;
&lt;li&gt;Summon an “identity permutation” where &lt;code&gt;x &amp;lt;&amp;gt; mempty == x&lt;/code&gt; (the identity permutation, which is “leave things alone”).&lt;/li&gt;
&lt;li&gt;Invert any shuffling (if we have &lt;code&gt;x&lt;/code&gt;, we can reverse its effect with &lt;code&gt;invert x&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, the standard libraries also give us a useful function &lt;code&gt;stimes&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;stimes ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which lets us compose &lt;code&gt;x&lt;/code&gt; with itself (&lt;code&gt;stimes 5 x == x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x&lt;/code&gt;), but can do it in &lt;em&gt;log(n)&lt;/em&gt; time using &lt;a href=&#34;https://en.wikipedia.org/wiki/Exponentiation_by_squaring&#34;&gt;repeated squaring&lt;/a&gt;. It’s extremely efficient in a lot of circumstances (more on that later) — more so than the naive compose-it-n-times implementation. This will definitely become useful in part 2, where we have to do 101741582076661 compositions.&lt;/p&gt;
&lt;h2 id=&#34;our-gameplan&#34;&gt;Our Gameplan&lt;/h2&gt;
&lt;p&gt;Just &lt;em&gt;knowing&lt;/em&gt; that permutations form a group naturally guides us to these abstractions — we already know what &lt;em&gt;interface&lt;/em&gt; our type will have, even before we write any code. We know that no matter &lt;em&gt;what&lt;/em&gt; our implementation of permutation will be, we will have &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt;, &lt;code&gt;stimes&lt;/code&gt;, &lt;code&gt;mempty&lt;/code&gt;, &lt;code&gt;invert&lt;/code&gt; available to us to use. So, let’s do just that! We’ll use a stub data type &lt;code&gt;Perm&lt;/code&gt; to represent our permutation and “pretend” we have that interface on it. We’ll write our functions first and then fill in the interface later!&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Represents a permutation of n cards&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;....&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Given a permutation, find the place where a given index ends up.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runPerm ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Parse a string line into the permutation it represents&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parsePerm ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Given a permutation list, find the place where 2019 ends up&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;part1 ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10007&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10007&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;part1 perms &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runPerm bigPerm &lt;span class=&#34;dv&#34;&gt;2019&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    bigPerm &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; perms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;mconcat perms&lt;/code&gt; composes all of the permutations one after another: &lt;code&gt;mconcat [x,y,z] = x &amp;lt;&amp;gt; y &amp;lt;&amp;gt; z&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;And…that’s it! For the actual “logic” of our part 1! All we need to do is implement &lt;code&gt;runPerm&lt;/code&gt; and &lt;code&gt;parsePerm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, I’m using &lt;code&gt;Finite n&lt;/code&gt; from the great &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/finite-typelits&#34;&gt;finite-typelits&lt;/a&gt;&lt;/em&gt; library, where &lt;code&gt;Finite 100&lt;/code&gt; represents “an index between 0 and 99”, etc. It’s just exactly the right “shape” to represent the index of a deck of cards. &lt;em&gt;finite-typelits&lt;/em&gt; wasn’t designed with group theory in mind, but it’s still a great tool here — which is a testament to how flexible these abstractions can actually be :)&lt;/p&gt;
&lt;p&gt;For example, it means that for a &lt;code&gt;Perm 10007&lt;/code&gt; (a permutation of 10007 cards), the type of &lt;code&gt;runPerm&lt;/code&gt; is &lt;code&gt;Perm 10007 -&amp;gt; Finite 10007 -&amp;gt; Finite 10007&lt;/code&gt;, and the type of &lt;code&gt;parsePerm&lt;/code&gt; is &lt;code&gt;String -&amp;gt; Perm 10007&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can plan out our part 2 as well:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Given a permutation list, find the index that will end up at 2020&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;part2 ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;119315717514047&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;119315717514047&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;part2 perms &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runPerm (invert biiigPerm) &lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;    bigPerm   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; perms&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;    biiigPerm &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; stimes &lt;span class=&#34;dv&#34;&gt;101741582076661&lt;/span&gt; bigPerm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part 2, I think, is where the group theory really shines.&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;We take advantage of &lt;code&gt;stimes&lt;/code&gt;, which uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Exponentiation_by_squaring&#34;&gt;repeated squaring&lt;/a&gt;. That means that to compute &lt;code&gt;stimes 8 x&lt;/code&gt;, instead of using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x &amp;lt;&amp;gt; x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it does&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let x2 = x &amp;lt;&amp;gt; x
    x4 = x2 &amp;lt;&amp;gt; x2
in  x4 &amp;lt;&amp;gt; x4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;essentially cutting down the number of multiplications exponentially. This means that to compute &lt;code&gt;stimes 101741582076661&lt;/code&gt;, we only need to do about 47 multiplications (log base 2), and not 101741582076661.&lt;/p&gt;
&lt;p&gt;This is only possible because we know that permutation composition is associative, so it doesn’t matter how we associate our parentheses. It is only “safe” to use repeated squaring if you &lt;em&gt;know&lt;/em&gt; that your operation is associative. Having a semigroup abstraction &lt;em&gt;in the first place&lt;/em&gt; guides us to this efficient solution — in a way that is pre-built just for us! This is made all the more powerful because &lt;em&gt;semigroup&lt;/em&gt; is a ubiquitous abstraction in Haskell, so we “think about” it all the time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember how &lt;code&gt;runPerm p 2019&lt;/code&gt; gives us the index that &lt;code&gt;2019&lt;/code&gt; is sent to? Well, we want something else in this case. We basically want the index that &lt;em&gt;will be sent to&lt;/em&gt; &lt;code&gt;2020&lt;/code&gt;. So, we want to &lt;em&gt;reverse the function&lt;/em&gt;. Luckily, since our function is just a permutation, it is easy to reverse this: just &lt;code&gt;invert&lt;/code&gt; the permutation!&lt;/p&gt;
&lt;p&gt;The idea that we can simply invert a permutation instead of having to write a whole new permutation representation just to do “backwards indexing” is something that we are &lt;em&gt;guided to&lt;/em&gt;, just by recognizing that permutations form a group.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;a-first-guess-at-implementation&#34;&gt;A first guess at implementation&lt;/h2&gt;
&lt;p&gt;Now, time to do what we have been putting off and actually write our permutation representation – the definition of &lt;code&gt;Perm n&lt;/code&gt;. A good &lt;em&gt;first guess&lt;/em&gt; might be to write our permutation as an actual function — a function from index to index, &lt;code&gt;Finite n -&amp;gt; Finite n&lt;/code&gt;. Then, we can just use function composition as our permutation composition.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n)&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runPerm ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;runPerm (&lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; f) x  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; f x&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parsePerm ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;parsePerm str &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;words&lt;/span&gt; str &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;cut&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_           &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n)&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;into&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maxBound&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; i&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;with&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n)&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; f &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; g)     &lt;span class=&#34;co&#34;&gt;-- apply g, then apply x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Group&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; n) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;    invert (&lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; f) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;?????&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;Finite n&lt;/code&gt;’s &lt;code&gt;Num&lt;/code&gt; instance is modular arithmetic, so things like &lt;code&gt;negate&lt;/code&gt; and multiplication will “do the right thing”. We use &lt;code&gt;modulo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;modulo ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which “reads” an &lt;code&gt;Integer&lt;/code&gt; into a &lt;code&gt;Finite n&lt;/code&gt;, making sure to wrap it in a cyclic way if it is negative or too high. &lt;code&gt;maxBound&lt;/code&gt; also gives us the highest index (the highest &lt;code&gt;Finite n&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; modulo &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;finite &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; modulo &lt;span class=&#34;dv&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;finite &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; modulo (&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;finite &lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;KnownNat&lt;/code&gt; instance is a constraint that &lt;code&gt;modulo&lt;/code&gt; needs in order to know what quotient to modulo into.&lt;/p&gt;
&lt;p&gt;This implementation &lt;em&gt;seems&lt;/em&gt; to work, except for one apparent major problem: how do we write &lt;code&gt;invert&lt;/code&gt;? Also, &lt;code&gt;stimes&lt;/code&gt; doesn’t help us &lt;em&gt;too&lt;/em&gt; much here, because repeated squaring of function composition is…still a lot of function compositions in the end.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; So, while composition with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is cheap, application with &lt;code&gt;runPerm&lt;/code&gt; is expensive (and &lt;code&gt;stimes&lt;/code&gt; works best when composition is expensive and application is cheap). So, back to the drawing board.&lt;/p&gt;
&lt;h2 id=&#34;a-second-implementation-attempt-lookin-affine-today&#34;&gt;A Second Implementation Attempt: Lookin’ Affine Today&lt;/h2&gt;
&lt;p&gt;If we look carefully at &lt;code&gt;parsePerm&lt;/code&gt;, we might start to see a pattern in all of our permutations. In fact, they all seem to follow the same form:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;cut&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_           &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n)&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;into&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;negate&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maxBound&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;with&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They all seem to be some “scaling” and “adding” of &lt;code&gt;i&lt;/code&gt;. If we align things up, this becomes a little more clear:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;cut&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_           &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;                &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n)&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;into&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;               &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maxBound&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;with&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Perm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;  modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of these seems to be some sort of scaling-and-adding of &lt;code&gt;i&lt;/code&gt;…also known as an &lt;a href=&#34;https://en.wikipedia.org/wiki/Affine_transformation&#34;&gt;Affine Transformation&lt;/a&gt;, but modulo some cyclic rotation.&lt;/p&gt;
&lt;p&gt;Well…affine transformations on cyclic indices are a subset of permutations in general. More importantly, we know (after some googling) that they are also &lt;em&gt;closed with respect to composition and inversion&lt;/em&gt; … which means that they are, themselves, a group! Maybe we can represent this as our permutation type:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/advent-shuffle.hs#L16-L28&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; aScale ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; aShift ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runPerm ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;runPerm (&lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a b) x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parseAffine ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;parseAffine str &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;words&lt;/span&gt; str &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;cut&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_           &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt;                &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;  (&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n))&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;into&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt;        (&lt;span class=&#34;fu&#34;&gt;negate&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)          &lt;span class=&#34;fu&#34;&gt;maxBound&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;deal&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;with&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; (modulo (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; n))                 &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is “defunctionalization”: if we notice a pattern in our functions, we can instead abstract out the data that defines each instance of that pattern, and work with that data instead.&lt;/p&gt;
&lt;p&gt;So far so good! Now to think about how to define composition.&lt;/p&gt;
&lt;p&gt;If we want to do &lt;span class=&#34;math inline&#34;&gt;\(f(x) = a&amp;#39; x + b&amp;#39;\)&lt;/span&gt; after &lt;span class=&#34;math inline&#34;&gt;\(g(x) = a x + b\)&lt;/span&gt;, it’s:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
(f \circ g)(x) &amp;amp; = a&amp;#39; (a x + b) + b&amp;#39;\\
  (f \circ g)(x) &amp;amp; = a&amp;#39; x + a&amp;#39; b + b&amp;#39;
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So composing &lt;code&gt;a&#39; x + b&#39;&lt;/code&gt; after &lt;code&gt;a x + b&lt;/code&gt; is is &lt;code&gt;a&#39; a x + a&#39; b + b&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/advent-shuffle.hs#L30-L31&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; n) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a&amp;#39; b&amp;#39; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; (a&amp;#39; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; a) (a&amp;#39; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b&amp;#39;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neat! We can now compose &lt;em&gt;and&lt;/em&gt; run &lt;code&gt;Affine&lt;/code&gt;s efficiently, which makes &lt;code&gt;stimes&lt;/code&gt; useful! And the &lt;code&gt;Num&lt;/code&gt; instance (which requires &lt;code&gt;KnownNat n&lt;/code&gt;) for &lt;code&gt;Finite n&lt;/code&gt; takes care of automatically doing modular arithmetic for us.&lt;/p&gt;
&lt;p&gt;To define a &lt;code&gt;Monoid&lt;/code&gt; instance, we need an identity permutation. This would just leave x alone, so it makes sense that it’s &lt;span class=&#34;math inline&#34;&gt;\(f(x) = 1 x + 0\)&lt;/span&gt;, &lt;code&gt;1 x + 0&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/advent-shuffle.hs#L33-L34&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; n) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let’s define the inverse, which is a bit trickier.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Group&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; n) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;    invert (&lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a b) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a&amp;#39; b&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34;&gt;&lt;/a&gt;        a&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ??&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34;&gt;&lt;/a&gt;        b&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ??&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Inverting&lt;/em&gt; something means that we want &lt;code&gt;invert p &amp;lt;&amp;gt; p == mempty&lt;/code&gt;. That means we want to find &lt;code&gt;a&#39;&lt;/code&gt; and &lt;code&gt;b&#39;&lt;/code&gt; such that:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a&amp;#39; b&amp;#39; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From our definition of &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; earlier, that means we have to find &lt;code&gt;a&#39;&lt;/code&gt; and &lt;code&gt;b&#39;&lt;/code&gt; where:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; (a&amp;#39; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; a) (a&amp;#39; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we need &lt;code&gt;a&#39; * a = 1&lt;/code&gt;, and &lt;code&gt;a&#39; * b + b&#39; = 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To solve &lt;code&gt;a&#39; * a = 1&lt;/code&gt;, we can imagine that cycling &lt;code&gt;a&lt;/code&gt; through the whole deck gets you back to &lt;code&gt;a&lt;/code&gt;. (If &lt;code&gt;n&lt;/code&gt; is prime, then &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;a*a&lt;/code&gt;, &lt;code&gt;a*a*a&lt;/code&gt;, etc. will all be unique…so you will keep on getting unique numbers until you exhaust the entire space at &lt;code&gt;a^size&lt;/code&gt; to arrive back at &lt;code&gt;a&lt;/code&gt;) So:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         a^n = a
=&amp;gt; a^(n-1)*a = a    -- definition of exponentiation
=&amp;gt; a^(n-1)   = 1    -- a^(n-1) leaves a unchanged, so it must be 1
=&amp;gt; a^(n-2)*a = 1    -- definition of exponentiation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this we can see that if &lt;code&gt;a&#39; * a = 1&lt;/code&gt;, then &lt;code&gt;a&#39;&lt;/code&gt; must be &lt;code&gt;a^(n-2)&lt;/code&gt; for prime &lt;code&gt;n&lt;/code&gt;.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second case is a little simpler: we can just shuffle around &lt;code&gt;a&#39; * b + b&#39; = 0&lt;/code&gt; to get &lt;code&gt;b&#39; = -(a&#39; * b)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gives us everything we need to write &lt;code&gt;invert&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/advent-shuffle.hs#L36-L41&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-3&#34;&gt;&lt;a href=&#34;#cb21-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Group instance only works if n is prime&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-4&#34;&gt;&lt;a href=&#34;#cb21-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownNat&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Group&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; n) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-5&#34;&gt;&lt;a href=&#34;#cb21-5&#34;&gt;&lt;/a&gt;    invert (&lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a b) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aff&lt;/span&gt; a&amp;#39; b&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb21-6&#34;&gt;&lt;a href=&#34;#cb21-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-7&#34;&gt;&lt;a href=&#34;#cb21-7&#34;&gt;&lt;/a&gt;        a&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt; (natVal (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;n) &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb21-8&#34;&gt;&lt;a href=&#34;#cb21-8&#34;&gt;&lt;/a&gt;        b&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;negate&lt;/span&gt; (a&amp;#39; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And…we’re done! This actually is pretty efficient with repeated squaring (which is how &lt;code&gt;^&lt;/code&gt; is implemented) because we are just squaring numbers. &lt;code&gt;natVal (Proxy @n)&lt;/code&gt; is how to get &lt;code&gt;n&lt;/code&gt; as an integer at the value level so we can use it as the exponent.&lt;/p&gt;
&lt;h2 id=&#34;the-full-implementation&#34;&gt;The Full Implementation&lt;/h2&gt;
&lt;p&gt;Just to close us out, I’ll re-paste the code we planned before, now with the context that we have implemented the appropriate permutation types. We get the &lt;code&gt;[Affine n]&lt;/code&gt;s by using &lt;code&gt;parseAffine&lt;/code&gt; on the &lt;code&gt;lines&lt;/code&gt; of our puzzle input and reversing that list.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/misc/advent-shuffle.hs#L43-L54&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Part 1: Given a permutation list, find the place where 2019 ends up&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;part1 ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10007&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10007&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34;&gt;&lt;/a&gt;part1 perms &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runPerm bigPerm &lt;span class=&#34;dv&#34;&gt;2019&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34;&gt;&lt;/a&gt;    bigPerm &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; perms&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | Part 2: Given a permutation list, find the index that will end up at 2020&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;part2 ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Affine&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;119315717514047&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Finite&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;119315717514047&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34;&gt;&lt;/a&gt;part2 perms &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runPerm (invert biiigPerm) &lt;span class=&#34;dv&#34;&gt;2020&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34;&gt;&lt;/a&gt;    bigPerm   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; perms&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34;&gt;&lt;/a&gt;    biiigPerm &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; stimes &lt;span class=&#34;dv&#34;&gt;101741582076661&lt;/span&gt; bigPerm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can load the finished code for this entire challenge &lt;a href=&#34;https://github.com/mstksg/inCode/tree/master/code-samples/misc/advent-shuffle.hs&#34;&gt;here&lt;/a&gt;. I’ve also included the sample input string for my advent of code account, and also parsed it conveniently into a list of properly ordered &lt;code&gt;Affine n&lt;/code&gt;s for you to test it yourself:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./advent-shuffle.hs
ghci&amp;gt; part1 myShuffles
finite 6978
ghci&amp;gt; part2 myShuffles
finite 24460989449140&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, Haskell performs these ~47 multiplication steps pretty quickly, and part 2 is only about 3 times slower than part 1 (~40μs vs. ~14μs on my machine).&lt;/p&gt;
&lt;h2 id=&#34;the-big-picture&#34;&gt;The Big Picture&lt;/h2&gt;
&lt;p&gt;Every time I make a post about how Haskell lets you “use” math, there’s a lot of room for confusion and misunderstanding. A common misconception is that you need to know math to use Haskell, or that writing a Haskell program is like solving a math equation.&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead, when we say we “use” math in Haskell, it means that Haskell naturally nudges us to phrase our problems in a way that can help illuminate connections to the groundwork that has already been laid for us through centuries of mathematical discoveries — and in many cases, allow us to translate those insights into making helpful improvements and optimizations in our actual code.&lt;/p&gt;
&lt;p&gt;Haskell is “functional programming”, but I think that betrays the major insight here: we got our main conceptual leap when we thought about shuffling not as “a function”, but rather &lt;em&gt;as data&lt;/em&gt;: our shuffle is itself &lt;em&gt;data&lt;/em&gt; (here, integers), and not an “algorithm”. Had we latched onto an algorithmic approach from the beginning, we might have gotten stuck in the mire of finding a way to “optimize an algorithm”. But because we initially started thinking about permutations and shuffles as &lt;em&gt;data structures&lt;/em&gt;, we actually end up thinking about how to most effectively manipulate the data structures themselves. Instead of manipulating the cards, we manipulate the shuffle! We combine and invert the &lt;em&gt;shuffles&lt;/em&gt;, not the cards. And math — especially abstract algebra — is all about different properties of how objects can combine and universal properties about certain operations.&lt;/p&gt;
&lt;p&gt;As we head into this wonderful season, stay safe and happy haskellings, everyone! :D&lt;/p&gt;
&lt;h2 id=&#34;special-thanks&#34;&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;I am very humbled to be supported by an amazing community, who make it possible for me to devote time to researching and writing these posts. Very special thanks to my supporter at the “Amazing” level on &lt;a href=&#34;https://www.patreon.com/justinle/overview&#34;&gt;patreon&lt;/a&gt;, Josh Vera! :)&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;We only allocate a few function pointers (once for each &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, where &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/jwl93i/shuffling_things_up_solving_advent_of_code_with/gcudwg4?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;both sides themselves point to the same function pointer&lt;/a&gt;), so it’s very efficient in space as well, but to actually “run” that final function, we need to still traverse all of those nested pointers the full number of times.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;You can also use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm&#34;&gt;Extended Euclidean Algorithm&lt;/a&gt; to find the multiplicative inverse here as well if you are a (cool) nerd. But I wanted to show a way to do this without requiring knowledge of any ring theory.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;As &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/jwl93i/shuffling_things_up_solving_advent_of_code_with/gct4ihy/?context=3&#34;&gt;pointed out by rogercaptain on reddit&lt;/a&gt;, this also “works” in the case where &lt;code&gt;n&lt;/code&gt; is not prime too: only &lt;em&gt;some&lt;/em&gt; (and not all) &lt;code&gt;Affine n&lt;/code&gt;s represent permutations when &lt;code&gt;n&lt;/code&gt; is not prime, and for those specific &lt;code&gt;Affine n&lt;/code&gt;s (namely, where &lt;code&gt;a&lt;/code&gt; is coprime to &lt;code&gt;n&lt;/code&gt;), this technique does work.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;Admittedly, we did do that a few times here. But that’s not &lt;em&gt;all&lt;/em&gt; we do :)&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><category>Math</category><guid isPermaLink="true">https://blog.jle.im/entry/shuffling-things-up.html</guid><pubDate>Wed, 18 Nov 2020 18:17:52 UTC</pubDate><creator>Justin Le</creator><subject>Haskell, Math</subject><date>2020-11-18</date></item><item><title>Enhancing Functor Structures Step-By-Step (Part 2)</title><link>https://blog.jle.im/entry/enhancing-functor-structures-step-by-step-2.html</link><description>&lt;p&gt;Welcome to Part 2 of the &lt;a href=&#34;https://blog.jle.im/entries/series/+enhancing-functor-structures.html&#34;&gt;“Enhancing Functor Structures” series&lt;/a&gt;! Here we are taking a base structure describing a data type schema and enhancing it step-by-step with new functory capabilities: first, covariant capabilities (to generate parsers), then contravariant capabilities (to generate serializers)…who knows what might be in store next?&lt;/p&gt;
&lt;p&gt;Please do check out &lt;a href=&#34;https://blog.jle.im/entry/enhancing-functor-structures-step-by-step-1.html&#34;&gt;Part 1&lt;/a&gt; if you haven’t already, since this post pretty much jumps straight into things!&lt;/p&gt;
&lt;h2 id=&#34;parsing-and-serializing-invariantly&#34;&gt;Parsing and Serializing Invariantly&lt;/h2&gt;
&lt;p&gt;As we left off our project, we had done three things:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Started with a simple ADT representing the structure we want to be able to express&lt;/li&gt;
&lt;li&gt;Enhanced that simple ADT with Covariant Functor capabilities, in order to interpret it as a parser&lt;/li&gt;
&lt;li&gt;Enhanced that original simple ADT with Contravariant Functor, in order to interpret it as a serializer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From this, it seems the next logical step would be to add &lt;em&gt;both&lt;/em&gt; enhancements to the same structure!&lt;/p&gt;
&lt;p&gt;There are some clear benefits to this — on the surface, it means we only have to write code once to get all three things (documentation, parsing, and serialization). Less code means less bugs!&lt;/p&gt;
&lt;p&gt;Even deeper, we can now ensure that our “serialization” and “parsing” functions are always “in sync”. If we defined a separate process/type for serializing and a separate process/type for parsing, then it’s possible we might accidentally make errors in keeping them in sync…one might use a different tag, or we might make changes to one but not the other during refactoring. There’s a good chance you have been bitten by situations where documentation becomes out of sync with actual code.&lt;/p&gt;
&lt;h3 id=&#34;adding-invariance&#34;&gt;Adding Invariance&lt;/h3&gt;
&lt;p&gt;Like before, the main thing we need to change at the fundamental level is &lt;code&gt;Primitive&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/invariant.hs#L39-L42&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)     (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt;   (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       (&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’re just basically combining the additions we made to enable parsing with the additions we made to enable serialization. Our new &lt;code&gt;Primitive&lt;/code&gt; type gives us the capability to do both!&lt;/p&gt;
&lt;p&gt;We can say this new &lt;code&gt;Primitive&lt;/code&gt; is an &lt;a href=&#34;https://hackage.haskell.org/package/invariant/docs/Data-Functor-Invariant.html&#34;&gt;“Invariant” Functor&lt;/a&gt;: these are functors that give you “both” capabilities: interpreting covariantly &lt;em&gt;and&lt;/em&gt; contravariantly.&lt;/p&gt;
&lt;p&gt;Because we must be able to eventually &lt;em&gt;use&lt;/em&gt; either covariant or contravariant interpretation on an invariant functor, the corresponding mapping function takes functions in both ways in order to support both on consumption-time.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Invariant&lt;/span&gt; f &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    invmap ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;divap-and-decalt&#34;&gt;DivAp and DecAlt&lt;/h3&gt;
&lt;p&gt;By now, we know the drill. We also need to change our &lt;code&gt;RecordType&lt;/code&gt; and &lt;code&gt;SumType&lt;/code&gt; constructors to get the right type of container.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Covariant Schema&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/parse.hs#L25-L29&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;    &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;  a)&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;     (&lt;span class=&#34;dt&#34;&gt;ListF&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Contravariant Schema&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/serialize.hs#L21-L24&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;  a)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;     (&lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the covariant &lt;code&gt;RecordType&lt;/code&gt;, we used &lt;code&gt;Ap Field a&lt;/code&gt;. For the contravariant &lt;code&gt;RecordType&lt;/code&gt;, we used &lt;code&gt;Div Field a&lt;/code&gt;. Is there a type that combines &lt;em&gt;both&lt;/em&gt; &lt;code&gt;Ap&lt;/code&gt; and &lt;code&gt;Div&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If we browse around, we see that we have &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/functor-combinators/docs/Data-Functor-Invariant-DivAp.html&#34;&gt;DivAp&lt;/a&gt;&lt;/em&gt; from the &lt;em&gt;functor-combinatotrs&lt;/em&gt; library…which appears to be named to in a way to invoke the idea of having both &lt;code&gt;Ap&lt;/code&gt; and &lt;code&gt;Div&lt;/code&gt; capabilities, combined together.&lt;/p&gt;
&lt;p&gt;For the covariant &lt;code&gt;SumType&lt;/code&gt;, we used &lt;code&gt;ListF Choice a&lt;/code&gt;. For the contravariant &lt;code&gt;SumType&lt;/code&gt;, we used &lt;code&gt;Dec Choice a&lt;/code&gt;. Is there a type that combines &lt;em&gt;both&lt;/em&gt; &lt;code&gt;ListF&lt;/code&gt; and &lt;code&gt;Dec&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If we look nearby &lt;code&gt;DivAp&lt;/code&gt;, we see the answer: &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/functor-combinators/docs/Data-Functor-Invariant-DecAlt.html&#34;&gt;DecAlt&lt;/a&gt;&lt;/em&gt;! It combines both &lt;code&gt;ListF&lt;/code&gt; and &lt;code&gt;Dec&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;building-an-invariant-schema&#34;&gt;Building an Invariant Schema&lt;/h3&gt;
&lt;p&gt;Let’s wire it up:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/invariant.hs#L24-L42&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;DivAp&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;  a)&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;     (&lt;span class=&#34;dt&#34;&gt;DecAlt&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; fieldName  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; fieldValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; choiceName  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; choiceValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)     (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt;   (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       (&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Writing a schema using this type is going to be very similar to writing one for our other schema types:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/invariant.hs#L55-L72&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customerSchema ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;customerSchema &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;    swerve (\&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CPerson&lt;/span&gt; x y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; (x,y); &lt;span class=&#34;dt&#34;&gt;CBusiness&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;           (&lt;span class=&#34;fu&#34;&gt;uncurry&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CPerson&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;dt&#34;&gt;CBusiness&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;        (inject &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;          { choiceName  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Person&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;          , choiceValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; gathered&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;              (inject &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; { fieldName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;, fieldValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; pString })&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;              (inject &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; { fieldName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Age&amp;quot;&lt;/span&gt; , fieldValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; pInt    })&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;          }&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;        (inject &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;          { choiceName  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Business&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;          , choiceValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;              inject &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; { fieldName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Age&amp;quot;&lt;/span&gt; , fieldValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; pInt }&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;          }&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference is, while &lt;code&gt;decide&lt;/code&gt; expects the &lt;code&gt;a -&amp;gt; Either b c&lt;/code&gt; splitting function, &lt;code&gt;swerve&lt;/code&gt; (the invariant &lt;code&gt;DecAlt&lt;/code&gt; equivalent) expects also the functions to “recombine” the &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; back to &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;swerve&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; b c)    &lt;span class=&#34;co&#34;&gt;-- ^ break into branches&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)             &lt;span class=&#34;co&#34;&gt;-- ^ put the branch back into the original input&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)             &lt;span class=&#34;co&#34;&gt;-- ^ put the branch back into the original input&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DecAlt&lt;/span&gt; f b           &lt;span class=&#34;co&#34;&gt;-- ^ handle first branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DecAlt&lt;/span&gt; f c           &lt;span class=&#34;co&#34;&gt;-- ^ handle second branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DecAlt&lt;/span&gt; f a           &lt;span class=&#34;co&#34;&gt;-- ^ overall handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;swerve&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)   &lt;span class=&#34;co&#34;&gt;-- ^ break into branches&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ((&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt;)              &lt;span class=&#34;co&#34;&gt;-- ^ put the CPerson branch back into a Customer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt;)                        &lt;span class=&#34;co&#34;&gt;-- ^ put the CBusiness branch back into a Customer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DecAlt&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)              &lt;span class=&#34;co&#34;&gt;-- ^ handle CPerson branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DecAlt&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;                        &lt;span class=&#34;co&#34;&gt;-- ^ handle CBusiness branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DecAlt&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- compare to what we used last time:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;decide&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)   &lt;span class=&#34;co&#34;&gt;-- ^ break into branches&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)                 &lt;span class=&#34;co&#34;&gt;-- ^ handle CPerson branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;                           &lt;span class=&#34;co&#34;&gt;-- ^ handle CBusiness branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also note that the invariant version of &lt;code&gt;divided&lt;/code&gt; is &lt;code&gt;gathered&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;gathered&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DivAp&lt;/span&gt; f a          &lt;span class=&#34;co&#34;&gt;-- ^ first handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DivAp&lt;/span&gt; f b          &lt;span class=&#34;co&#34;&gt;-- ^ second handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DivAp&lt;/span&gt; f (a, b)     &lt;span class=&#34;co&#34;&gt;-- ^ merged handler&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;gathered&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DivAp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;          &lt;span class=&#34;co&#34;&gt;-- ^ handle the cpName field&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DivAp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;             &lt;span class=&#34;co&#34;&gt;-- ^ handle the cpAge field&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DivAp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)   &lt;span class=&#34;co&#34;&gt;-- ^ handle both together&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- compare to what we used last time:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;divided&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;          &lt;span class=&#34;co&#34;&gt;-- ^ handle the cpName field&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;             &lt;span class=&#34;co&#34;&gt;-- ^ handle the cpAge field&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)   &lt;span class=&#34;co&#34;&gt;-- ^ handle both together&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-invariant-schema&#34;&gt;Using Invariant Schema&lt;/h3&gt;
&lt;p&gt;Let’s look into writing our interpreters. Luckily, we already did most of the work in the previous post. Writing &lt;code&gt;schemaDoc&lt;/code&gt;, &lt;code&gt;schemaParser&lt;/code&gt;, and &lt;code&gt;schemaToValue&lt;/code&gt;, we can re-use pretty much all of our code!&lt;/p&gt;
&lt;p&gt;The main (unfortunate) difference is that instead of using &lt;code&gt;interpret&lt;/code&gt; in every case, we must use &lt;code&gt;runCoDivAp&lt;/code&gt; to run our &lt;code&gt;DivAp&lt;/code&gt; in a covariant setting, and &lt;code&gt;runContraDivAp&lt;/code&gt; to run our &lt;code&gt;DivAp&lt;/code&gt; in a contravariant setting (similarly for &lt;code&gt;runCoDecAlt&lt;/code&gt; and &lt;code&gt;runContraDecAlt&lt;/code&gt;).&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/invariant.hs#L74-L150&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;schemaDoc&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- ^ name&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; x     &lt;span class=&#34;co&#34;&gt;-- ^ schema&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;schemaDoc title &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; fs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; PP.vsep [&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;        PP.pretty (&lt;span class=&#34;st&#34;&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; title &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;      , PP.indent &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; PP.vsep &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;          htoList (\fld &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;PP.&amp;lt;+&amp;gt;&lt;/span&gt; PP.indent &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; (fieldDoc fld)) fs&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt; cs    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; PP.vsep [&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;        PP.pretty (&lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; title &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;      , &lt;span class=&#34;st&#34;&gt;&amp;quot;Choice of:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;      , PP.indent &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; PP.vsep &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;          htoList choiceDoc cs&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; p  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; PP.pretty (title &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;              &lt;span class=&#34;op&#34;&gt;PP.&amp;lt;+&amp;gt;&lt;/span&gt; primDoc p&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    fieldDoc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;    fieldDoc (&lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; name val) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; schemaDoc name val&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    choiceDoc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;    choiceDoc (&lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; name val) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; schemaDoc name val&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    primDoc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;    primDoc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-30&#34;&gt;&lt;a href=&#34;#cb9-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt;   _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-31&#34;&gt;&lt;a href=&#34;#cb9-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-32&#34;&gt;&lt;a href=&#34;#cb9-32&#34;&gt;&lt;/a&gt;schemaParser&lt;/span&gt;
&lt;span id=&#34;cb9-33&#34;&gt;&lt;a href=&#34;#cb9-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-34&#34;&gt;&lt;a href=&#34;#cb9-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-35&#34;&gt;&lt;a href=&#34;#cb9-35&#34;&gt;&lt;/a&gt;schemaParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-36&#34;&gt;&lt;a href=&#34;#cb9-36&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; fs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCoDivAp  fieldParser  fs&lt;/span&gt;
&lt;span id=&#34;cb9-37&#34;&gt;&lt;a href=&#34;#cb9-37&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;    cs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runCoDecAlt choiceParser cs&lt;/span&gt;
&lt;span id=&#34;cb9-38&#34;&gt;&lt;a href=&#34;#cb9-38&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; p  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; primParser p&lt;/span&gt;
&lt;span id=&#34;cb9-39&#34;&gt;&lt;a href=&#34;#cb9-39&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-40&#34;&gt;&lt;a href=&#34;#cb9-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    choiceParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb9-41&#34;&gt;&lt;a href=&#34;#cb9-41&#34;&gt;&lt;/a&gt;    choiceParser (&lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; name val) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-42&#34;&gt;&lt;a href=&#34;#cb9-42&#34;&gt;&lt;/a&gt;      tag &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; A.key &lt;span class=&#34;st&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt; A.asString&lt;/span&gt;
&lt;span id=&#34;cb9-43&#34;&gt;&lt;a href=&#34;#cb9-43&#34;&gt;&lt;/a&gt;      unless (tag &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; name) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-44&#34;&gt;&lt;a href=&#34;#cb9-44&#34;&gt;&lt;/a&gt;        A.throwCustomError &lt;span class=&#34;st&#34;&gt;&amp;quot;Tag does not match&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-45&#34;&gt;&lt;a href=&#34;#cb9-45&#34;&gt;&lt;/a&gt;      A.key &lt;span class=&#34;st&#34;&gt;&amp;quot;contents&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; schemaParser val&lt;/span&gt;
&lt;span id=&#34;cb9-46&#34;&gt;&lt;a href=&#34;#cb9-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    fieldParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb9-47&#34;&gt;&lt;a href=&#34;#cb9-47&#34;&gt;&lt;/a&gt;    fieldParser (&lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; name val) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; A.key (T.pack name) (schemaParser val)&lt;/span&gt;
&lt;span id=&#34;cb9-48&#34;&gt;&lt;a href=&#34;#cb9-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    primParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb9-49&#34;&gt;&lt;a href=&#34;#cb9-49&#34;&gt;&lt;/a&gt;    primParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-50&#34;&gt;&lt;a href=&#34;#cb9-50&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; _ f &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; A.withString &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-51&#34;&gt;&lt;a href=&#34;#cb9-51&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;error validating string&amp;quot;&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-52&#34;&gt;&lt;a href=&#34;#cb9-52&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; _ f &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; A.withScientific &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-53&#34;&gt;&lt;a href=&#34;#cb9-53&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;error validating number&amp;quot;&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-54&#34;&gt;&lt;a href=&#34;#cb9-54&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt; _ f &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; A.withBool &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-55&#34;&gt;&lt;a href=&#34;#cb9-55&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;error validating bool&amp;quot;&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-56&#34;&gt;&lt;a href=&#34;#cb9-56&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-57&#34;&gt;&lt;a href=&#34;#cb9-57&#34;&gt;&lt;/a&gt;schemaToValue&lt;/span&gt;
&lt;span id=&#34;cb9-58&#34;&gt;&lt;a href=&#34;#cb9-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-59&#34;&gt;&lt;a href=&#34;#cb9-59&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-60&#34;&gt;&lt;a href=&#34;#cb9-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-61&#34;&gt;&lt;a href=&#34;#cb9-61&#34;&gt;&lt;/a&gt;schemaToValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-62&#34;&gt;&lt;a href=&#34;#cb9-62&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; fs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; Aeson.object&lt;/span&gt;
&lt;span id=&#34;cb9-63&#34;&gt;&lt;a href=&#34;#cb9-63&#34;&gt;&lt;/a&gt;                   &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getOp (runContraDivAp  fieldToValue  fs)&lt;/span&gt;
&lt;span id=&#34;cb9-64&#34;&gt;&lt;a href=&#34;#cb9-64&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;    cs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; getOp (runContraDecAlt choiceToValue cs)&lt;/span&gt;
&lt;span id=&#34;cb9-65&#34;&gt;&lt;a href=&#34;#cb9-65&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; p  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; primToValue p&lt;/span&gt;
&lt;span id=&#34;cb9-66&#34;&gt;&lt;a href=&#34;#cb9-66&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-67&#34;&gt;&lt;a href=&#34;#cb9-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    choiceToValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Value&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb9-68&#34;&gt;&lt;a href=&#34;#cb9-68&#34;&gt;&lt;/a&gt;    choiceToValue (&lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; name val) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; Aeson.object&lt;/span&gt;
&lt;span id=&#34;cb9-69&#34;&gt;&lt;a href=&#34;#cb9-69&#34;&gt;&lt;/a&gt;      [ &lt;span class=&#34;st&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;Aeson..=&lt;/span&gt; T.pack name&lt;/span&gt;
&lt;span id=&#34;cb9-70&#34;&gt;&lt;a href=&#34;#cb9-70&#34;&gt;&lt;/a&gt;      , &lt;span class=&#34;st&#34;&gt;&amp;quot;contents&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;Aeson..=&lt;/span&gt; schemaToValue val x&lt;/span&gt;
&lt;span id=&#34;cb9-71&#34;&gt;&lt;a href=&#34;#cb9-71&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb9-72&#34;&gt;&lt;a href=&#34;#cb9-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    fieldToValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Aeson.Pair&lt;/span&gt;] x&lt;/span&gt;
&lt;span id=&#34;cb9-73&#34;&gt;&lt;a href=&#34;#cb9-73&#34;&gt;&lt;/a&gt;    fieldToValue (&lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; name val) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-74&#34;&gt;&lt;a href=&#34;#cb9-74&#34;&gt;&lt;/a&gt;        [T.pack name &lt;span class=&#34;op&#34;&gt;Aeson..=&lt;/span&gt; schemaToValue val x]&lt;/span&gt;
&lt;span id=&#34;cb9-75&#34;&gt;&lt;a href=&#34;#cb9-75&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    primToValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-76&#34;&gt;&lt;a href=&#34;#cb9-76&#34;&gt;&lt;/a&gt;    primToValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-77&#34;&gt;&lt;a href=&#34;#cb9-77&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; f _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-78&#34;&gt;&lt;a href=&#34;#cb9-78&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; f _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Number&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-79&#34;&gt;&lt;a href=&#34;#cb9-79&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt;   f _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Bool&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there we have it — a fully functional bidirectional parser schema type that we assembled step-by-step, adding each piece incrementally and exploring the space until we found something useful for us. We have a single schema that can represent documentation, parsing, and serialization in a way that they are all kept in sync, after writing things only once!&lt;/p&gt;
&lt;p&gt;A cute function we could write to tie things together would be one that does a round-trip, serializing and then parsing, to make sure things worked properly.&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/invariant.hs#L152-L156&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;testRoundTrip&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;A.ParseError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;) a&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;testRoundTrip sch &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; A.parseValue (schemaParser sch) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; schemaToValue sch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; testRoundTrip customerSchema (&lt;span class=&#34;dt&#34;&gt;CPerson&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Sam&amp;quot;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;CPerson&lt;/span&gt; {cpName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Sam&amp;quot;&lt;/span&gt;, cpAge &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks solid to me!&lt;/p&gt;
&lt;h2 id=&#34;an-alternative-invariant-strategy&#34;&gt;An Alternative Invariant Strategy&lt;/h2&gt;
&lt;p&gt;The thought process “I want to use both &lt;code&gt;Div&lt;/code&gt; and &lt;code&gt;Ap&lt;/code&gt;, let’s just look for &lt;code&gt;DivAp&lt;/code&gt;” is kind of nice and straightforward. However, there’s a major downside in using &lt;code&gt;DivAp&lt;/code&gt; and &lt;code&gt;DecAlt&lt;/code&gt; that make their ergonomics not so great when building them up.&lt;/p&gt;
&lt;p&gt;A major part about what makes &lt;code&gt;Ap&lt;/code&gt; and &lt;code&gt;ListF&lt;/code&gt; (and, to an extent, &lt;code&gt;Div&lt;/code&gt; and &lt;code&gt;Dec&lt;/code&gt;) so nice to use is that they are instances of popular Haskell typeclasses like &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Alternative&lt;/code&gt; (or &lt;code&gt;Plus&lt;/code&gt;) and using &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Alternative&lt;/code&gt; interfaces are pretty common in Haskell. Because of this, they are pretty comfortable for most Haskellers to use.&lt;/p&gt;
&lt;p&gt;However, &lt;code&gt;DivAp&lt;/code&gt; and &lt;code&gt;DecAlt&lt;/code&gt; aren’t really instances of any commonly used typeclass (aside from &lt;code&gt;Invariant&lt;/code&gt;).&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; So you really don’t have any nice interface for them other than just using functions specifically written for them, like &lt;code&gt;gather&lt;/code&gt; and &lt;code&gt;swerve&lt;/code&gt;, which may feel ad-hoc.&lt;/p&gt;
&lt;p&gt;Luckily, there’s another way to achieve the same goals and also be able to take advantage of our favorite familiar interfaces. We can “add Contravariance” directly into &lt;code&gt;Ap&lt;/code&gt; itself, using &lt;a href=&#34;https://hackage.haskell.org/package/functor-combinators/docs/Data-HFunctor-Route.html#t:Pre&#34;&gt;&lt;code&gt;Pre&lt;/code&gt;&lt;/a&gt;. This is a trick I first saw used in the &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/unjson&#34;&gt;unjson&lt;/a&gt;&lt;/em&gt; library.&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;Ap Field a&lt;/code&gt; is a collection that contains a bunch of &lt;code&gt;Field x&lt;/code&gt;s of different &lt;code&gt;x&lt;/code&gt;s, and can be used to covariantly &lt;em&gt;produce&lt;/em&gt; an &lt;code&gt;a&lt;/code&gt; by combining all of the &lt;code&gt;x&lt;/code&gt;s back together.&lt;/p&gt;
&lt;p&gt;Now, a value of type:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will “produce” &lt;code&gt;a&lt;/code&gt;s covariantly…but will “consume” &lt;code&gt;r&lt;/code&gt;s contravariantly. You can think of the &lt;code&gt;Pre r&lt;/code&gt; as adding an “tunnel” to guide the &lt;code&gt;r&lt;/code&gt; to each &lt;code&gt;Field&lt;/code&gt; in the &lt;code&gt;Ap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;Ap&lt;/code&gt; is &lt;code&gt;Ap&lt;/code&gt; (famous for its &lt;code&gt;Applicative&lt;/code&gt; instance), we can use normal Applicative combinators to combine our fake invariant type:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) a&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;(&lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) a&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) b&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;liftA2&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) a&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) b&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;) c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We see that the &lt;code&gt;Applicative&lt;/code&gt; combinators will recombine our “output” covariant types appropriately, but will keep the “input” contravariant type constant&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can construct a value of type &lt;code&gt;Ap (Pre r Field) a&lt;/code&gt; using &lt;code&gt;injectPre&lt;/code&gt;, which asks us to provide that “get an &lt;code&gt;a&lt;/code&gt; from &lt;code&gt;r&lt;/code&gt;” function up-front:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;injectPre ::&lt;/span&gt; (r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; r f) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How do we interpret out of &lt;code&gt;Ap (Pre r f) a&lt;/code&gt;? Well, there’s a useful newtype wrapper over &lt;code&gt;Pre&lt;/code&gt; called &lt;code&gt;PreT&lt;/code&gt; that makes consuming and interpreting it very clean, by requiring the &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; to be the same:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt; t f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt; (t (&lt;span class=&#34;dt&#34;&gt;Pre&lt;/span&gt; a f) a)&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | `inject` works just like it did before with `Ap` and `Div`: put that `f`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- into a `PreT`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;inject ::&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | interpret for PreT treats `PreT Ap f a` as if it were just `Ap f a`, so we&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- interpret into an `Applicative` context, like we did with the parsers when&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- we used `Ap f a`.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;interpret&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; g&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g x)&lt;/span&gt;
&lt;span id=&#34;cb16-13&#34;&gt;&lt;a href=&#34;#cb16-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb16-14&#34;&gt;&lt;a href=&#34;#cb16-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g a&lt;/span&gt;
&lt;span id=&#34;cb16-15&#34;&gt;&lt;a href=&#34;#cb16-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-16&#34;&gt;&lt;a href=&#34;#cb16-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | But we can also interpret into a `Divisible` context!  Just like when we&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-17&#34;&gt;&lt;a href=&#34;#cb16-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- used `Div f a` to write our serializer!&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-18&#34;&gt;&lt;a href=&#34;#cb16-18&#34;&gt;&lt;/a&gt;preDivisibleT&lt;/span&gt;
&lt;span id=&#34;cb16-19&#34;&gt;&lt;a href=&#34;#cb16-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Divisible&lt;/span&gt; g&lt;/span&gt;
&lt;span id=&#34;cb16-20&#34;&gt;&lt;a href=&#34;#cb16-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g x)&lt;/span&gt;
&lt;span id=&#34;cb16-21&#34;&gt;&lt;a href=&#34;#cb16-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb16-22&#34;&gt;&lt;a href=&#34;#cb16-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g a&lt;/span&gt;
&lt;span id=&#34;cb16-23&#34;&gt;&lt;a href=&#34;#cb16-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-24&#34;&gt;&lt;a href=&#34;#cb16-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | We can also use htoList like before&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-25&#34;&gt;&lt;a href=&#34;#cb16-25&#34;&gt;&lt;/a&gt;htoList&lt;/span&gt;
&lt;span id=&#34;cb16-26&#34;&gt;&lt;a href=&#34;#cb16-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb16-27&#34;&gt;&lt;a href=&#34;#cb16-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb16-28&#34;&gt;&lt;a href=&#34;#cb16-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [b]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We see that &lt;code&gt;interpret&lt;/code&gt; for &lt;code&gt;PreT Ap f a&lt;/code&gt; works just like &lt;code&gt;interpret&lt;/code&gt; for &lt;code&gt;Ap f a&lt;/code&gt;; we don’t lose any power, it’s the same as always if we wanted to just use &lt;code&gt;Ap f a&lt;/code&gt; covariantly to interpret into a parser. Exactly what we did when we wrote our parser generation.&lt;/p&gt;
&lt;p&gt;But, we also gain &lt;code&gt;preDivisibleT&lt;/code&gt;, which lets us &lt;code&gt;interpret&lt;/code&gt; into a contravariant &lt;code&gt;Divisible&lt;/code&gt; context! Just like as if we had &lt;code&gt;Div f a&lt;/code&gt;! This is exactly what we did when we wrote our serializers.&lt;/p&gt;
&lt;p&gt;So using &lt;code&gt;Pre&lt;/code&gt; and &lt;code&gt;PreT&lt;/code&gt;, we get to &lt;em&gt;assemble&lt;/em&gt; it using our favorite &lt;code&gt;Applicative&lt;/code&gt; combinators…then when we wrap it in &lt;code&gt;PreT&lt;/code&gt;, we get to &lt;em&gt;interpret&lt;/em&gt; it in whatever way we want by choosing different interpreters. It’s the best of both worlds!&lt;/p&gt;
&lt;p&gt;We can do the opposite thing with &lt;code&gt;Dec&lt;/code&gt; as well: we can use &lt;a href=&#34;https://hackage.haskell.org/package/functor-combinators/docs/Data-HFunctor-Route.html#t:Post&#34;&gt;&lt;code&gt;Post&lt;/code&gt;&lt;/a&gt; to embed covariant capabilities in &lt;code&gt;Dec&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;Div Choice a&lt;/code&gt; is a collection that contains a bunch of &lt;code&gt;Choice x&lt;/code&gt;s of different &lt;code&gt;x&lt;/code&gt;s, and can be used to contravariantly &lt;em&gt;consume&lt;/em&gt; an &lt;code&gt;a&lt;/code&gt; (by sending the &lt;code&gt;a&lt;/code&gt; to one of the different &lt;code&gt;Choice x&lt;/code&gt;s).&lt;/p&gt;
&lt;p&gt;A value of type:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will “consume” &lt;code&gt;a&lt;/code&gt;s contravariantly (like a normal &lt;code&gt;Dec&lt;/code&gt;), but will also produce &lt;code&gt;r&lt;/code&gt;s covariantly. You can think of the &lt;code&gt;Post r&lt;/code&gt; as adding an “tunnel” allowing the output of each &lt;code&gt;Choice&lt;/code&gt; to exit out of the &lt;code&gt;Dec&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means we can now use normal &lt;code&gt;Conclude&lt;/code&gt; contravariant typeclass-based combinators to combine our fake invariant type:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34;&gt;&lt;/a&gt;decide&lt;/span&gt;
&lt;span id=&#34;cb18-2&#34;&gt;&lt;a href=&#34;#cb18-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; b c)        &lt;span class=&#34;co&#34;&gt;-- ^ break into branches&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-3&#34;&gt;&lt;a href=&#34;#cb18-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;) b    &lt;span class=&#34;co&#34;&gt;-- ^ handle first branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-4&#34;&gt;&lt;a href=&#34;#cb18-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;) c    &lt;span class=&#34;co&#34;&gt;-- ^ handle second branch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-5&#34;&gt;&lt;a href=&#34;#cb18-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; r &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;) a    &lt;span class=&#34;co&#34;&gt;-- ^ overall handler&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We see that &lt;code&gt;decide&lt;/code&gt; will recombine our “input” contravariant types appropriately, but will keep the “output” covariant type constant&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, we can construct a value of type &lt;code&gt;Dec (Post r Choice) a&lt;/code&gt; using &lt;code&gt;injectPost&lt;/code&gt;, which asks us to provide that “embed the &lt;code&gt;a&lt;/code&gt; in the &lt;code&gt;r&lt;/code&gt;” function up-front:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;injectPost ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; r f) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And again, we have the newtype wrapper &lt;code&gt;PostT&lt;/code&gt; that gives us convenient interpreting functions:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb20-1&#34;&gt;&lt;a href=&#34;#cb20-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; t f a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; (t (&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; a f) a)&lt;/span&gt;
&lt;span id=&#34;cb20-2&#34;&gt;&lt;a href=&#34;#cb20-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-3&#34;&gt;&lt;a href=&#34;#cb20-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | `inject` works just like it did before with `Dec` and `ListF`: put that `f`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-4&#34;&gt;&lt;a href=&#34;#cb20-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- into a `PostT`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-5&#34;&gt;&lt;a href=&#34;#cb20-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;inject ::&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb20-6&#34;&gt;&lt;a href=&#34;#cb20-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-7&#34;&gt;&lt;a href=&#34;#cb20-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | interpret for PostT treats `PostT Dec f a` as if it were just `Dec f a`, so we&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-8&#34;&gt;&lt;a href=&#34;#cb20-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- interpret into a `Conclude` context, like we did with the serializers when&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-9&#34;&gt;&lt;a href=&#34;#cb20-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- we used `Dec f a`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-10&#34;&gt;&lt;a href=&#34;#cb20-10&#34;&gt;&lt;/a&gt;interpret&lt;/span&gt;
&lt;span id=&#34;cb20-11&#34;&gt;&lt;a href=&#34;#cb20-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Conclude&lt;/span&gt; g&lt;/span&gt;
&lt;span id=&#34;cb20-12&#34;&gt;&lt;a href=&#34;#cb20-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g x)&lt;/span&gt;
&lt;span id=&#34;cb20-13&#34;&gt;&lt;a href=&#34;#cb20-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb20-14&#34;&gt;&lt;a href=&#34;#cb20-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g a&lt;/span&gt;
&lt;span id=&#34;cb20-15&#34;&gt;&lt;a href=&#34;#cb20-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-16&#34;&gt;&lt;a href=&#34;#cb20-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | But we can also interpret into a `Plus` context!  Just like when we&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-17&#34;&gt;&lt;a href=&#34;#cb20-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- used `ListF f a` to write our parser generation!&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-18&#34;&gt;&lt;a href=&#34;#cb20-18&#34;&gt;&lt;/a&gt;postPlusT&lt;/span&gt;
&lt;span id=&#34;cb20-19&#34;&gt;&lt;a href=&#34;#cb20-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt; g&lt;/span&gt;
&lt;span id=&#34;cb20-20&#34;&gt;&lt;a href=&#34;#cb20-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g x)&lt;/span&gt;
&lt;span id=&#34;cb20-21&#34;&gt;&lt;a href=&#34;#cb20-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb20-22&#34;&gt;&lt;a href=&#34;#cb20-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; g a&lt;/span&gt;
&lt;span id=&#34;cb20-23&#34;&gt;&lt;a href=&#34;#cb20-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-24&#34;&gt;&lt;a href=&#34;#cb20-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | We can also use htoList like before&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-25&#34;&gt;&lt;a href=&#34;#cb20-25&#34;&gt;&lt;/a&gt;htoList&lt;/span&gt;
&lt;span id=&#34;cb20-26&#34;&gt;&lt;a href=&#34;#cb20-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb20-27&#34;&gt;&lt;a href=&#34;#cb20-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb20-28&#34;&gt;&lt;a href=&#34;#cb20-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [b]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get the same benefits as for &lt;code&gt;PreT&lt;/code&gt;: if we want to interpret into a &lt;code&gt;Conclude&lt;/code&gt; (like we did for our serializers), we can use &lt;code&gt;interpret&lt;/code&gt;. If we want to interpret into a &lt;code&gt;Plus&lt;/code&gt; (like we did for our parser generation), we can use &lt;code&gt;postPlusT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With these new tools, we can imagine a different invariant &lt;code&gt;Schema&lt;/code&gt; type:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/routing.hs#L36-L85&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-3&#34;&gt;&lt;a href=&#34;#cb21-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-4&#34;&gt;&lt;a href=&#34;#cb21-4&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Ap&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;  a)&lt;/span&gt;
&lt;span id=&#34;cb21-5&#34;&gt;&lt;a href=&#34;#cb21-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;     (&lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb21-6&#34;&gt;&lt;a href=&#34;#cb21-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb21-7&#34;&gt;&lt;a href=&#34;#cb21-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-8&#34;&gt;&lt;a href=&#34;#cb21-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-9&#34;&gt;&lt;a href=&#34;#cb21-9&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; fieldName  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-10&#34;&gt;&lt;a href=&#34;#cb21-10&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; fieldValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb21-11&#34;&gt;&lt;a href=&#34;#cb21-11&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb21-12&#34;&gt;&lt;a href=&#34;#cb21-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-13&#34;&gt;&lt;a href=&#34;#cb21-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-14&#34;&gt;&lt;a href=&#34;#cb21-14&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; choiceName  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-15&#34;&gt;&lt;a href=&#34;#cb21-15&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; choiceValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb21-16&#34;&gt;&lt;a href=&#34;#cb21-16&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb21-17&#34;&gt;&lt;a href=&#34;#cb21-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-18&#34;&gt;&lt;a href=&#34;#cb21-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-19&#34;&gt;&lt;a href=&#34;#cb21-19&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)     (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;     &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb21-20&#34;&gt;&lt;a href=&#34;#cb21-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb21-21&#34;&gt;&lt;a href=&#34;#cb21-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt;   (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       (&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb21-22&#34;&gt;&lt;a href=&#34;#cb21-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-23&#34;&gt;&lt;a href=&#34;#cb21-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customerSchema ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Customer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-24&#34;&gt;&lt;a href=&#34;#cb21-24&#34;&gt;&lt;/a&gt;customerSchema &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-25&#34;&gt;&lt;a href=&#34;#cb21-25&#34;&gt;&lt;/a&gt;    decide (\&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CPerson&lt;/span&gt; x y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; (x, y); &lt;span class=&#34;dt&#34;&gt;CBusiness&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&#34;cb21-26&#34;&gt;&lt;a href=&#34;#cb21-26&#34;&gt;&lt;/a&gt;      (injectPost (&lt;span class=&#34;fu&#34;&gt;uncurry&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CPerson&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-27&#34;&gt;&lt;a href=&#34;#cb21-27&#34;&gt;&lt;/a&gt;        { choiceName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Person&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-28&#34;&gt;&lt;a href=&#34;#cb21-28&#34;&gt;&lt;/a&gt;        , choiceValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PreT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; (,)&lt;/span&gt;
&lt;span id=&#34;cb21-29&#34;&gt;&lt;a href=&#34;#cb21-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; injectPre &lt;span class=&#34;fu&#34;&gt;fst&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; { fieldName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;, fieldValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; pString }&lt;/span&gt;
&lt;span id=&#34;cb21-30&#34;&gt;&lt;a href=&#34;#cb21-30&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; injectPre &lt;span class=&#34;fu&#34;&gt;snd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; { fieldName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Age&amp;quot;&lt;/span&gt; , fieldValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; pInt    }&lt;/span&gt;
&lt;span id=&#34;cb21-31&#34;&gt;&lt;a href=&#34;#cb21-31&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb21-32&#34;&gt;&lt;a href=&#34;#cb21-32&#34;&gt;&lt;/a&gt;      )&lt;/span&gt;
&lt;span id=&#34;cb21-33&#34;&gt;&lt;a href=&#34;#cb21-33&#34;&gt;&lt;/a&gt;      (injectPost &lt;span class=&#34;dt&#34;&gt;CBusiness&lt;/span&gt;         &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-34&#34;&gt;&lt;a href=&#34;#cb21-34&#34;&gt;&lt;/a&gt;        { choiceName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Person&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-35&#34;&gt;&lt;a href=&#34;#cb21-35&#34;&gt;&lt;/a&gt;        , choiceValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; inject &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-36&#34;&gt;&lt;a href=&#34;#cb21-36&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; { fieldName &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Age&amp;quot;&lt;/span&gt; , fieldValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; pInt    }&lt;/span&gt;
&lt;span id=&#34;cb21-37&#34;&gt;&lt;a href=&#34;#cb21-37&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb21-38&#34;&gt;&lt;a href=&#34;#cb21-38&#34;&gt;&lt;/a&gt;      )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that to build up &lt;code&gt;choiceValue&lt;/code&gt; for &lt;code&gt;Person&lt;/code&gt;, we can use our normal favorite &lt;code&gt;Appliciative&lt;/code&gt; combinators, like &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;! And at the top level, we use &lt;code&gt;decide&lt;/code&gt; like we did before with our general contravariant combinators.&lt;/p&gt;
&lt;p&gt;All of our running functions look pretty much the same as well:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- source: https://github.com/mstksg/inCode/tree/master/code-samples/functor-structures/routing.hs#L87-L167&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34;&gt;&lt;/a&gt;schemaDoc&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- ^ name&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; x     &lt;span class=&#34;co&#34;&gt;-- ^ schema&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34;&gt;&lt;/a&gt;schemaDoc title &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; fs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; PP.vsep [&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34;&gt;&lt;/a&gt;        PP.pretty (&lt;span class=&#34;st&#34;&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; title &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34;&gt;&lt;/a&gt;      , PP.indent &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; PP.vsep &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34;&gt;&lt;/a&gt;          htoList (\fld &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;PP.&amp;lt;+&amp;gt;&lt;/span&gt; PP.indent &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; (fieldDoc fld)) fs&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt; cs    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; PP.vsep [&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34;&gt;&lt;/a&gt;        PP.pretty (&lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; title &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb22-15&#34;&gt;&lt;a href=&#34;#cb22-15&#34;&gt;&lt;/a&gt;      , &lt;span class=&#34;st&#34;&gt;&amp;quot;Choice of:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-16&#34;&gt;&lt;a href=&#34;#cb22-16&#34;&gt;&lt;/a&gt;      , PP.indent &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; PP.vsep &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-17&#34;&gt;&lt;a href=&#34;#cb22-17&#34;&gt;&lt;/a&gt;          htoList choiceDoc cs&lt;/span&gt;
&lt;span id=&#34;cb22-18&#34;&gt;&lt;a href=&#34;#cb22-18&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb22-19&#34;&gt;&lt;a href=&#34;#cb22-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; p  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; PP.pretty (title &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb22-20&#34;&gt;&lt;a href=&#34;#cb22-20&#34;&gt;&lt;/a&gt;              &lt;span class=&#34;op&#34;&gt;PP.&amp;lt;+&amp;gt;&lt;/span&gt; primDoc p&lt;/span&gt;
&lt;span id=&#34;cb22-21&#34;&gt;&lt;a href=&#34;#cb22-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-22&#34;&gt;&lt;a href=&#34;#cb22-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    fieldDoc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-23&#34;&gt;&lt;a href=&#34;#cb22-23&#34;&gt;&lt;/a&gt;    fieldDoc &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;{&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; schemaDoc fieldName fieldValue&lt;/span&gt;
&lt;span id=&#34;cb22-24&#34;&gt;&lt;a href=&#34;#cb22-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    choiceDoc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-25&#34;&gt;&lt;a href=&#34;#cb22-25&#34;&gt;&lt;/a&gt;    choiceDoc &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;{&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; schemaDoc choiceName choiceValue&lt;/span&gt;
&lt;span id=&#34;cb22-26&#34;&gt;&lt;a href=&#34;#cb22-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    primDoc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PP.Doc&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-27&#34;&gt;&lt;a href=&#34;#cb22-27&#34;&gt;&lt;/a&gt;    primDoc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-28&#34;&gt;&lt;a href=&#34;#cb22-28&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-29&#34;&gt;&lt;a href=&#34;#cb22-29&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-30&#34;&gt;&lt;a href=&#34;#cb22-30&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt;   _ _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-31&#34;&gt;&lt;a href=&#34;#cb22-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-32&#34;&gt;&lt;a href=&#34;#cb22-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;schemaParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrType&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-33&#34;&gt;&lt;a href=&#34;#cb22-33&#34;&gt;&lt;/a&gt;schemaParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-34&#34;&gt;&lt;a href=&#34;#cb22-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; fs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; interpret fieldParser fs&lt;/span&gt;
&lt;span id=&#34;cb22-35&#34;&gt;&lt;a href=&#34;#cb22-35&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;    cs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; postPlusT choiceParser cs&lt;/span&gt;
&lt;span id=&#34;cb22-36&#34;&gt;&lt;a href=&#34;#cb22-36&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; p  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; primParser p&lt;/span&gt;
&lt;span id=&#34;cb22-37&#34;&gt;&lt;a href=&#34;#cb22-37&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-38&#34;&gt;&lt;a href=&#34;#cb22-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    fieldParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-39&#34;&gt;&lt;a href=&#34;#cb22-39&#34;&gt;&lt;/a&gt;    fieldParser &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;{&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; A.key (T.pack fieldName) (schemaParser fieldValue)&lt;/span&gt;
&lt;span id=&#34;cb22-40&#34;&gt;&lt;a href=&#34;#cb22-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    choiceParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-41&#34;&gt;&lt;a href=&#34;#cb22-41&#34;&gt;&lt;/a&gt;    choiceParser &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;{&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-42&#34;&gt;&lt;a href=&#34;#cb22-42&#34;&gt;&lt;/a&gt;      tag &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; A.key &lt;span class=&#34;st&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt; A.asString&lt;/span&gt;
&lt;span id=&#34;cb22-43&#34;&gt;&lt;a href=&#34;#cb22-43&#34;&gt;&lt;/a&gt;      unless (tag &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; choiceName) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-44&#34;&gt;&lt;a href=&#34;#cb22-44&#34;&gt;&lt;/a&gt;        A.throwCustomError &lt;span class=&#34;st&#34;&gt;&amp;quot;Tag does not match&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-45&#34;&gt;&lt;a href=&#34;#cb22-45&#34;&gt;&lt;/a&gt;      A.key &lt;span class=&#34;st&#34;&gt;&amp;quot;contents&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; schemaParser choiceValue&lt;/span&gt;
&lt;span id=&#34;cb22-46&#34;&gt;&lt;a href=&#34;#cb22-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    primParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A.Parse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-47&#34;&gt;&lt;a href=&#34;#cb22-47&#34;&gt;&lt;/a&gt;    primParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-48&#34;&gt;&lt;a href=&#34;#cb22-48&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; _ f &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; A.withString &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-49&#34;&gt;&lt;a href=&#34;#cb22-49&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;error validating string&amp;quot;&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb22-50&#34;&gt;&lt;a href=&#34;#cb22-50&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; _ f &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; A.withScientific &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-51&#34;&gt;&lt;a href=&#34;#cb22-51&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;error validating number&amp;quot;&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb22-52&#34;&gt;&lt;a href=&#34;#cb22-52&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt; _ f &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; A.withBool &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-53&#34;&gt;&lt;a href=&#34;#cb22-53&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;error validating bool&amp;quot;&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb22-54&#34;&gt;&lt;a href=&#34;#cb22-54&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-55&#34;&gt;&lt;a href=&#34;#cb22-55&#34;&gt;&lt;/a&gt;schemaToValue&lt;/span&gt;
&lt;span id=&#34;cb22-56&#34;&gt;&lt;a href=&#34;#cb22-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-57&#34;&gt;&lt;a href=&#34;#cb22-57&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-58&#34;&gt;&lt;a href=&#34;#cb22-58&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-59&#34;&gt;&lt;a href=&#34;#cb22-59&#34;&gt;&lt;/a&gt;schemaToValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-60&#34;&gt;&lt;a href=&#34;#cb22-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;RecordType&lt;/span&gt; fs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; Aeson.object &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getOp (preDivisibleT fieldToValue fs)&lt;/span&gt;
&lt;span id=&#34;cb22-61&#34;&gt;&lt;a href=&#34;#cb22-61&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SumType&lt;/span&gt;    cs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; getOp (interpret choiceToValue cs)&lt;/span&gt;
&lt;span id=&#34;cb22-62&#34;&gt;&lt;a href=&#34;#cb22-62&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;SchemaLeaf&lt;/span&gt; p  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; primToValue p&lt;/span&gt;
&lt;span id=&#34;cb22-63&#34;&gt;&lt;a href=&#34;#cb22-63&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-64&#34;&gt;&lt;a href=&#34;#cb22-64&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    fieldToValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Aeson.Pair&lt;/span&gt;] a&lt;/span&gt;
&lt;span id=&#34;cb22-65&#34;&gt;&lt;a href=&#34;#cb22-65&#34;&gt;&lt;/a&gt;    fieldToValue &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt;{&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-66&#34;&gt;&lt;a href=&#34;#cb22-66&#34;&gt;&lt;/a&gt;        [T.pack fieldName &lt;span class=&#34;op&#34;&gt;Aeson..=&lt;/span&gt; schemaToValue fieldValue x]&lt;/span&gt;
&lt;span id=&#34;cb22-67&#34;&gt;&lt;a href=&#34;#cb22-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    choiceToValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Value&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb22-68&#34;&gt;&lt;a href=&#34;#cb22-68&#34;&gt;&lt;/a&gt;    choiceToValue &lt;span class=&#34;dt&#34;&gt;Choice&lt;/span&gt;{&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Op&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; Aeson.object&lt;/span&gt;
&lt;span id=&#34;cb22-69&#34;&gt;&lt;a href=&#34;#cb22-69&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;st&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;      &lt;span class=&#34;op&#34;&gt;Aeson..=&lt;/span&gt; T.pack choiceName&lt;/span&gt;
&lt;span id=&#34;cb22-70&#34;&gt;&lt;a href=&#34;#cb22-70&#34;&gt;&lt;/a&gt;        , &lt;span class=&#34;st&#34;&gt;&amp;quot;contents&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;Aeson..=&lt;/span&gt; schemaToValue choiceValue x&lt;/span&gt;
&lt;span id=&#34;cb22-71&#34;&gt;&lt;a href=&#34;#cb22-71&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb22-72&#34;&gt;&lt;a href=&#34;#cb22-72&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    primToValue ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Primitive&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-73&#34;&gt;&lt;a href=&#34;#cb22-73&#34;&gt;&lt;/a&gt;    primToValue &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-74&#34;&gt;&lt;a href=&#34;#cb22-74&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PString&lt;/span&gt; f _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.String&lt;/span&gt; (T.pack (f x))&lt;/span&gt;
&lt;span id=&#34;cb22-75&#34;&gt;&lt;a href=&#34;#cb22-75&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PNumber&lt;/span&gt; f _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Number&lt;/span&gt; (f x)&lt;/span&gt;
&lt;span id=&#34;cb22-76&#34;&gt;&lt;a href=&#34;#cb22-76&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;PBool&lt;/span&gt;   f _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Aeson.Bool&lt;/span&gt;   (f x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;DivAp&lt;/code&gt;/&lt;code&gt;DecAlt&lt;/code&gt; and &lt;code&gt;PreT Ap&lt;/code&gt;/&lt;code&gt;PostT Dec&lt;/code&gt; are just two separate styles for you to consider if we want to go into combining &lt;em&gt;both&lt;/em&gt; covariant production &lt;em&gt;and&lt;/em&gt; contravariant consumption!&lt;/p&gt;
&lt;h2 id=&#34;concluding-thoughts&#34;&gt;Concluding Thoughts&lt;/h2&gt;
&lt;p&gt;If you’ve come this far, thank you for reading!&lt;/p&gt;
&lt;p&gt;The thought process described in this series was pretty much my actual thought process when writing something similar. I needed to provide documentation, a json parser, and a json serializer for a collection of data formats that I had. At first I had written three separate systems, and wrote all three separately for each format. I struggled with keeping all of them in sync, but everything clicked when I realized I could combine the documentation generator and the parser generation. I looked at my serializer system with regret on how it had to be a separate thing. But then I stared really really hard at it, and all of a sudden the idea of uniting all three of them became something I realized was worthwhile.&lt;/p&gt;
&lt;p&gt;It really was a truly “step-by-step” process…and I think it’s pretty rare that these fully formed united abstractions just pop out of your brain without going through the process of looking at each individual piece!&lt;/p&gt;
&lt;p&gt;In real code this pairing of the covariant and covariant is pretty prevalent. In another recent situation, I had to deal with “incoming” typed sockets (covariant outputters) and “outgoing” typed sockets (contravariant consumers)…the contexts where you get these sort of opposing dual pairs comes up a lot. Being able write a functor structure that lets you deal with them together can save a lot of code, reduce the space for errors, and relieve a lot of maintenance burden. For example, in the case of sockets, we could even write:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb23-1&#34;&gt;&lt;a href=&#34;#cb23-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | allocate an outgoing socket that only accepts values of your schema&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-2&#34;&gt;&lt;a href=&#34;#cb23-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;makeOutSocket ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;OutSocket&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb23-3&#34;&gt;&lt;a href=&#34;#cb23-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-4&#34;&gt;&lt;a href=&#34;#cb23-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | allocate an incoming socket that awaits values of your schema&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-5&#34;&gt;&lt;a href=&#34;#cb23-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;makeInSocket ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Schema&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;InSocket&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;code&gt;Schema a&lt;/code&gt; could represent a data protocol; under this system, you have the assurance that the protocol of sending a data type over a channel is always going to be the same as the protocol for receiving data, no matter what changes you make to your type. And you only have to write the code once, not twice!&lt;/p&gt;
&lt;p&gt;Try to investigate situations in your life where “structures” could be more useful as “functor structures”…and then maybe see if there’s even more value you could add by enhancing them with more functor-ness!&lt;/p&gt;
&lt;p&gt;Hopefully &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/functor-combinators&#34;&gt;functor-combinators&lt;/a&gt;&lt;/em&gt; and the &lt;em&gt;[functor combinatorpedia][]&lt;/em&gt; may be a useful guide along the way! You don’t have to build things “functor combinator style” like in this post (you could make everything from scratch without using &lt;code&gt;Ap&lt;/code&gt;/&lt;code&gt;Dec&lt;/code&gt;, etc.), but I have found that thinking in this style helps guide your search to solutions that already exist (like how we found &lt;code&gt;ListF&lt;/code&gt; by reading about &lt;code&gt;Ap&lt;/code&gt;), instead of reinventing the wheel every time. If anything, it can help you reframe the problem in a way that might make it more easy to grasp.&lt;/p&gt;
&lt;p&gt;Until next time, happy Haskelling!&lt;/p&gt;
&lt;h2 id=&#34;special-thanks&#34;&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;I am very humbled to be supported by an amazing community, who make it possible for me to devote time to researching and writing these posts. Very special thanks to my supporter at the “Amazing” level on &lt;a href=&#34;https://www.patreon.com/justinle/overview&#34;&gt;patreon&lt;/a&gt;, Josh Vera! :)&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;These are unfortunate consequences of the fact that there is no general typeclass that contains both &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Divisible&lt;/code&gt; together, or no typeclass that contains both &lt;code&gt;Plus&lt;/code&gt; and &lt;code&gt;Conclude&lt;/code&gt; together. If these existed, we could just use &lt;code&gt;interpret&lt;/code&gt; for all four of those functions.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;There &lt;em&gt;could&lt;/em&gt; be a typeclass for “combination of &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Divisible&lt;/code&gt;” and “combination of &lt;code&gt;Plus&lt;/code&gt; and &lt;code&gt;Conclude&lt;/code&gt;”:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DivisibleApplicative&lt;/span&gt; f &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  conquerpure ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  divideAp ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b, c)) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And every &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Divisible&lt;/code&gt; instance would be a valid instance of this. However, this doesn’t really exist in any common Haskell libraries…and I’m not sure it exists anywhere at all.&lt;/p&gt;
&lt;p&gt;Having this typeclass would also give us an &lt;code&gt;interpret&lt;/code&gt; that we can use for both &lt;code&gt;A.Parser ErrType&lt;/code&gt; and &lt;code&gt;Op Aeson.Value&lt;/code&gt;, so we don’t need the awkward two-different-interpreter situation we had before.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;This works out because each of the &lt;code&gt;Field&lt;/code&gt;s inside could work off of the same input type. Remember that &lt;code&gt;Div f a ~ [f a]&lt;/code&gt;, it’s just a list of things that consume the same &lt;code&gt;a&lt;/code&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;This works out because each of the &lt;code&gt;Choice&lt;/code&gt;s inside could be embedded into the same output type. Remember that we used &lt;code&gt;List f a ~ [f a]&lt;/code&gt; for our contravariant choice collection before, just a list of things that produce the same &lt;code&gt;a&lt;/code&gt;.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/enhancing-functor-structures-step-by-step-2.html</guid><pubDate>Tue, 18 Aug 2020 16:45:11 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2020-08-18</date></item><language>en</language><copyright>Copyright 2020 Justin Le</copyright><managingEditor>justin@jle.im (Justin Le)</managingEditor><webMaster>justin@jle.im (Justin Le)</webMaster><lastBuildDate>Thu, 11 Feb 2021 19:02:56 UTC</lastBuildDate><generator>feed-1.0.0.0 (Sigbjorn Finne)</generator><image><url>https://blog.jle.im/img/site_logo.jpg</url><title>in Code</title><link>https://blog.jle.im/</link></image><creator>Justin Le</creator><language>en</language><rights>Copyright 2020 Justin Le</rights><date>2021-02-11</date><description>Weblog of Justin Le, covering various adventures in programming and explorations in the worlds of computation physics, and knowledge.
</description></channel></rss>